/* A RapidNet application. Generated by RapidNet compiler. */

#include "ml.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"
#include <chrono>
#include <fstream>

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::ml;

const string Ml::ASSOCIATIONRULE = "associationrule";
const string Ml::CITERATE = "cIterate";
const string Ml::CLIST = "cList";
const string Ml::CLF = "clf";
const string Ml::IDENTIFIEDPATTERN = "identifiedPattern";
const string Ml::IMAGE = "image";
const string Ml::PCLF = "pClf";
const string Ml::PITERATE = "pIterate";
const string Ml::PLIST = "pList";
const string Ml::PREDICTION = "prediction";
const string Ml::RESULT = "result";

NS_LOG_COMPONENT_DEFINE ("Ml");
NS_OBJECT_ENSURE_REGISTERED (Ml);

TypeId
Ml::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::ml::Ml")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Ml> ()
    ;
  return tid;
}

Ml::Ml()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Ml::~Ml()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Ml::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Ml::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Ml Application Started");
}

void
Ml::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Ml Application Stopped");
}

void
Ml::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (ASSOCIATIONRULE, attrdeflist (
    attrdef ("associationrule_attr1", IPV4),
    attrdef ("associationrule_attr2", IPV4),
    attrdef ("associationrule_attr3", IPV4),
    attrdef ("associationrule_attr4", IPV4)));

  AddRelationWithKeys (CLF, attrdeflist (
    attrdef ("clf_attr1", IPV4),
    attrdef ("clf_attr2", IPV4)));

  AddRelationWithKeys (IDENTIFIEDPATTERN, attrdeflist (
    attrdef ("identifiedPattern_attr1", IPV4),
    attrdef ("identifiedPattern_attr2", IPV4),
    attrdef ("identifiedPattern_attr3", IPV4),
    attrdef ("identifiedPattern_attr4", IPV4),
    attrdef ("identifiedPattern_attr5", IPV4)));

  AddRelationWithKeys (IMAGE, attrdeflist (
    attrdef ("image_attr1", IPV4),
    attrdef ("image_attr2", IPV4),
    attrdef ("image_attr3", IPV4)));

  AddRelationWithKeys (PCLF, attrdeflist (
    attrdef ("pClf_attr1", IPV4),
    attrdef ("pClf_attr2", IPV4),
    attrdef ("pClf_attr3", IPV4)));

  AddRelationWithKeys (PREDICTION, attrdeflist (
    attrdef ("prediction_attr1", IPV4),
    attrdef ("prediction_attr2", IPV4),
    attrdef ("prediction_attr3", IPV4),
    attrdef ("prediction_attr4", IPV4)));

  AddRelationWithKeys (RESULT, attrdeflist (
    attrdef ("result_attr1", IPV4),
    attrdef ("result_attr2", IPV4),
    attrdef ("result_attr3", IPV4),
    attrdef ("result_attr4", IPV4),
    attrdef ("result_attr5", IPV4)));

}

void
Ml::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, CLF))
    {
      R1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, CLF))
    {
      R1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, IMAGE))
    {
      R2Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PCLF))
    {
      R2Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, PLIST))
    {
      R3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      R4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      R5_eca (tuple);
    }
  if (IsInsertEvent (tuple, ASSOCIATIONRULE))
    {
      R6Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, ASSOCIATIONRULE))
    {
      R6Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, PREDICTION))
    {
      R6Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, PREDICTION))
    {
      R6Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, IDENTIFIEDPATTERN))
    {
      R7Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, CLIST))
    {
      R8_eca (tuple);
    }
  if (IsRecvEvent (tuple, CITERATE))
    {
      R9_eca (tuple);
    }
  if (IsRecvEvent (tuple, CITERATE))
    {
      R10_eca (tuple);
    }
}

void
Ml::R1Eca0Ins (Ptr<Tuple> clf)
{
  RAPIDNET_LOG_INFO ("R1Eca0Ins triggered");

  Ptr<Tuple> result = clf;

  result->Assign (Assignor::New ("Enabled",
    FInitClassifier::New (
      VarExpr::New ("clf_attr2"))));

  result = result->Project (
    PCLF,
    strlist ("clf_attr1",
      "clf_attr2",
      "Enabled"),
    strlist ("pClf_attr1",
      "pClf_attr2",
      "pClf_attr3"));

  Insert (result);
}

void
Ml::R1Eca0Del (Ptr<Tuple> clf)
{
  RAPIDNET_LOG_INFO ("R1Eca0Del triggered");

  Ptr<Tuple> result = clf;

  result->Assign (Assignor::New ("Enabled",
    FInitClassifier::New (
      VarExpr::New ("clf_attr2"))));

  result = result->Project (
    PCLF,
    strlist ("clf_attr1",
      "clf_attr2",
      "Enabled"),
    strlist ("pClf_attr1",
      "pClf_attr2",
      "pClf_attr3"));

  Delete (result);
}

void
Ml::R2Eca0Ins (Ptr<Tuple> image)
{
  RAPIDNET_LOG_INFO ("R2Eca0Ins triggered");

  ofstream ofs;
  ofs.open("output/ml/timing", std::ofstream::out | std::ofstream::app);
  ofs << "[image insert] " << image->GetAttribute("image_attr2")->ToString() << '\t';
  ofs << std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() << endl;
  ofs.close();

  Ptr<RelationBase> result;

  result = GetRelation (PCLF)->Join (
    image,
    strlist ("pClf_attr1"),
    strlist ("image_attr1"));

  result->Assign (Assignor::New ("L",
    FClassifyImage::New (
      VarExpr::New ("image_attr3"),
      VarExpr::New ("pClf_attr2"))));

  result = result->Project (
    PLIST,
    strlist ("image_attr1",
      "image_attr2",
      "L"),
    strlist ("pList_attr1",
      "pList_attr2",
      "pList_attr3"));

  SendLocal (result);
}

void
Ml::R2Eca1Ins (Ptr<Tuple> pClf)
{
  RAPIDNET_LOG_INFO ("R2Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (IMAGE)->Join (
    pClf,
    strlist ("image_attr1"),
    strlist ("pClf_attr1"));

  result->Assign (Assignor::New ("L",
    FClassifyImage::New (
      VarExpr::New ("image_attr3"),
      VarExpr::New ("pClf_attr2"))));

  result = result->Project (
    PLIST,
    strlist ("pClf_attr1",
      "image_attr2",
      "L"),
    strlist ("pList_attr1",
      "pList_attr2",
      "pList_attr3"));

  SendLocal (result);
}

void
Ml::R3_eca (Ptr<Tuple> pList)
{
  RAPIDNET_LOG_INFO ("R3_eca triggered");

  Ptr<Tuple> result = pList;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    PITERATE,
    strlist ("pList_attr1",
      "pList_attr2",
      "N",
      "pList_attr3"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Ml::R4_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("R4_eca triggered");

  Ptr<Tuple> result = pIterate;

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pIterate_attr4")))));

  result = result->Project (
    PITERATE,
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "N",
      "pIterate_attr4"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Ml::R5_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("R5_eca triggered");

  Ptr<Tuple> result = pIterate;

  result->Assign (Assignor::New ("AnotherList",
    FItem::New (
      VarExpr::New ("pIterate_attr4"),
      VarExpr::New ("pIterate_attr3"))));

  result->Assign (Assignor::New ("Item",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Prob",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (2)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pIterate_attr4")))));

  result = result->Project (
    PREDICTION,
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "Item",
      "Prob"),
    strlist ("prediction_attr1",
      "prediction_attr2",
      "prediction_attr3",
      "prediction_attr4"));

  Insert (result);
}

void
Ml::R6Eca0Ins (Ptr<Tuple> associationrule)
{
  RAPIDNET_LOG_INFO ("R6Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PREDICTION)->Join (
    associationrule,
    strlist ("prediction_attr3", "prediction_attr1"),
    strlist ("associationrule_attr2", "associationrule_attr1"));

  result->Assign (Assignor::New ("Prob",
    Operation::New (RN_TIMES,
      VarExpr::New ("associationrule_attr4"),
      VarExpr::New ("prediction_attr4"))));

  result = result->Project (
    IDENTIFIEDPATTERN,
    strlist ("associationrule_attr1",
      "prediction_attr2",
      "associationrule_attr2",
      "associationrule_attr3",
      "Prob"),
    strlist ("identifiedPattern_attr1",
      "identifiedPattern_attr2",
      "identifiedPattern_attr3",
      "identifiedPattern_attr4",
      "identifiedPattern_attr5"));

  Insert (result);
}

void
Ml::R6Eca0Del (Ptr<Tuple> associationrule)
{
  RAPIDNET_LOG_INFO ("R6Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PREDICTION)->Join (
    associationrule,
    strlist ("prediction_attr3", "prediction_attr1"),
    strlist ("associationrule_attr2", "associationrule_attr1"));

  result->Assign (Assignor::New ("Prob",
    Operation::New (RN_TIMES,
      VarExpr::New ("associationrule_attr4"),
      VarExpr::New ("prediction_attr4"))));

  result = result->Project (
    IDENTIFIEDPATTERN,
    strlist ("associationrule_attr1",
      "prediction_attr2",
      "associationrule_attr2",
      "associationrule_attr3",
      "Prob"),
    strlist ("identifiedPattern_attr1",
      "identifiedPattern_attr2",
      "identifiedPattern_attr3",
      "identifiedPattern_attr4",
      "identifiedPattern_attr5"));

  Delete (result);
}

void
Ml::R6Eca1Ins (Ptr<Tuple> prediction)
{
  RAPIDNET_LOG_INFO ("R6Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ASSOCIATIONRULE)->Join (
    prediction,
    strlist ("associationrule_attr2", "associationrule_attr1"),
    strlist ("prediction_attr3", "prediction_attr1"));

  result->Assign (Assignor::New ("Prob",
    Operation::New (RN_TIMES,
      VarExpr::New ("associationrule_attr4"),
      VarExpr::New ("prediction_attr4"))));

  result = result->Project (
    IDENTIFIEDPATTERN,
    strlist ("prediction_attr1",
      "prediction_attr2",
      "prediction_attr3",
      "associationrule_attr3",
      "Prob"),
    strlist ("identifiedPattern_attr1",
      "identifiedPattern_attr2",
      "identifiedPattern_attr3",
      "identifiedPattern_attr4",
      "identifiedPattern_attr5"));

  Insert (result);
}

void
Ml::R6Eca1Del (Ptr<Tuple> prediction)
{
  RAPIDNET_LOG_INFO ("R6Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ASSOCIATIONRULE)->Join (
    prediction,
    strlist ("associationrule_attr2", "associationrule_attr1"),
    strlist ("prediction_attr3", "prediction_attr1"));

  result->Assign (Assignor::New ("Prob",
    Operation::New (RN_TIMES,
      VarExpr::New ("associationrule_attr4"),
      VarExpr::New ("prediction_attr4"))));

  result = result->Project (
    IDENTIFIEDPATTERN,
    strlist ("prediction_attr1",
      "prediction_attr2",
      "prediction_attr3",
      "associationrule_attr3",
      "Prob"),
    strlist ("identifiedPattern_attr1",
      "identifiedPattern_attr2",
      "identifiedPattern_attr3",
      "identifiedPattern_attr4",
      "identifiedPattern_attr5"));

  Delete (result);
}

void
Ml::R7Eca0Ins (Ptr<Tuple> identifiedPattern)
{
  RAPIDNET_LOG_INFO ("R7Eca0Ins triggered");

  Ptr<Tuple> result = identifiedPattern;

  result->Assign (Assignor::New ("L",
    FClassifyPerson::New (
      VarExpr::New ("identifiedPattern_attr4"))));

  result = result->Project (
    CLIST,
    strlist ("identifiedPattern_attr1",
      "identifiedPattern_attr2",
      "L",
      "identifiedPattern_attr4",
      "identifiedPattern_attr5"),
    strlist ("cList_attr1",
      "cList_attr2",
      "cList_attr3",
      "cList_attr4",
      "cList_attr5"));

  SendLocal (result);
}

void
Ml::R8_eca (Ptr<Tuple> cList)
{
  RAPIDNET_LOG_INFO ("R8_eca triggered");

  Ptr<Tuple> result = cList;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      ValueExpr::New (Int32Value::New (0)),
      FSize::New (
        VarExpr::New ("cList_attr3")))));

  result = result->Project (
    CITERATE,
    strlist ("cList_attr1",
      "cList_attr2",
      "N",
      "cList_attr3",
      "cList_attr4",
      "cList_attr5"),
    strlist ("cIterate_attr1",
      "cIterate_attr2",
      "cIterate_attr3",
      "cIterate_attr4",
      "cIterate_attr5",
      "cIterate_attr6"));

  SendLocal (result);
}

void
Ml::R9_eca (Ptr<Tuple> cIterate)
{
  RAPIDNET_LOG_INFO ("R9_eca triggered");

  Ptr<Tuple> result = cIterate;

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("cIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("cIterate_attr3"),
      FSize::New (
        VarExpr::New ("cIterate_attr4")))));

  result = result->Project (
    CITERATE,
    strlist ("cIterate_attr1",
      "cIterate_attr2",
      "N",
      "cIterate_attr4",
      "cIterate_attr5",
      "cIterate_attr6"),
    strlist ("cIterate_attr1",
      "cIterate_attr2",
      "cIterate_attr3",
      "cIterate_attr4",
      "cIterate_attr5",
      "cIterate_attr6"));

  SendLocal (result);
}

void
Ml::R10_eca (Ptr<Tuple> cIterate)
{
  RAPIDNET_LOG_INFO ("R10_eca triggered");

  Ptr<Tuple> result = cIterate;

  result->Assign (Assignor::New ("AnotherList",
    FItem::New (
      VarExpr::New ("cIterate_attr4"),
      VarExpr::New ("cIterate_attr3"))));

  result->Assign (Assignor::New ("Person",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Prob2",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (2)))));

  result->Assign (Assignor::New ("Prob",
    VarExpr::New ("cIterate_attr6")));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("cIterate_attr3"),
      FSize::New (
        VarExpr::New ("cIterate_attr4")))));

  result = result->Project (
    RESULT,
    strlist ("cIterate_attr1",
      "cIterate_attr2",
      "cIterate_attr5",
      "Person",
      "Prob"),
    strlist ("result_attr1",
      "result_attr2",
      "result_attr3",
      "result_attr4",
      "result_attr5"));

  ofstream ofs;
  ofs.open("output/ml/timing", std::ofstream::out | std::ofstream::app);
  ofs << "[result insert] " << result->GetAttribute("result_attr2")->ToString() << '\t';
  ofs << std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() << endl;
  ofs.close();

  Insert (result);
}

