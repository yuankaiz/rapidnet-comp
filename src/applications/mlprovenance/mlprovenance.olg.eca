ECA Rule prov_r1_1Eca0Ins ACTION_REMOTE_SEND<epClfTemp(@RLOC, Nd, Clfid, Enabled, RID, R, List)> :- EVENT_INSERT<clf(@Nd, Clfid)>, PID1 := f_sha1((clf+ Nd)+ Clfid), List := f_append(PID1), Enabled := f_initclassifier(Clfid), RLOC := Nd, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_1Eca0Del ACTION_REMOTE_SEND<epClfTempDelete(@RLOC, Nd, Clfid, Enabled, RID, R, List)> :- EVENT_DELETE<clf(@Nd, Clfid)>, PID1 := f_sha1((clf+ Nd)+ Clfid), List := f_append(PID1), Enabled := f_initclassifier(Clfid), RLOC := Nd, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epClfTemp(@RLOC, Nd, Clfid, Enabled, RID, R, List)>.
ECA Rule prov_r1_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epClfTempDelete(@RLOC, Nd, Clfid, Enabled, RID, R, List)>.
ECA Rule prov_r1_3_ecaAdd ACTION_REMOTE_SEND<epClf(@Nd, Clfid, Enabled, RID, RLOC)> :- EVENT_RECV<epClfTemp(@RLOC, Nd, Clfid, Enabled, RID, R, List)>.
ECA Rule prov_r1_3_ecaDel ACTION_REMOTE_SEND<epClfDelete(@Nd, Clfid, Enabled, RID, RLOC)> :- EVENT_RECV<epClfTempDelete(@RLOC, Nd, Clfid, Enabled, RID, R, List)>.
ECA Rule prov_r1_4_ecaAdd ACTION_ADD<pClf(@Nd, Clfid, Enabled)> :- EVENT_RECV<epClf(@Nd, Clfid, Enabled, RID, RLOC)>.
ECA Rule prov_r1_4_ecaDel ACTION_DELETE<pClf(@Nd, Clfid, Enabled)> :- EVENT_RECV<epClfDelete(@Nd, Clfid, Enabled, RID, RLOC)>.
ECA Rule prov_r1_5_ecaAdd ACTION_ADD<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<epClf(@Nd, Clfid, Enabled, RID, RLOC)>, VID := f_sha1(((pClf+ Nd)+ Clfid)+ Enabled).
ECA Rule prov_r1_5_ecaDel ACTION_DELETE<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<epClfDelete(@Nd, Clfid, Enabled, RID, RLOC)>, VID := f_sha1(((pClf+ Nd)+ Clfid)+ Enabled).
ECA Rule prov_r2_1Eca0Ins ACTION_REMOTE_SEND<epListTemp(@RLOC, Nd, Id, L, RID, R, List)> :- EVENT_INSERT<image(@Nd, Id, Img)>, pClf(@Nd, Clfid, 1), PID1 := f_sha1(((image+ Nd)+ Id)+ Img), List := f_append(PID1), PID2 := f_sha1(((pClf+ Nd)+ Clfid)+ 1), List2 := f_append(PID2), List := f_concat(List, List2), L := f_classifyimage(Img, Clfid), RLOC := Nd, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca0Del ACTION_REMOTE_SEND<epListTempDelete(@RLOC, Nd, Id, L, RID, R, List)> :- EVENT_DELETE<image(@Nd, Id, Img)>, pClf(@Nd, Clfid, 1), PID1 := f_sha1(((image+ Nd)+ Id)+ Img), List := f_append(PID1), PID2 := f_sha1(((pClf+ Nd)+ Clfid)+ 1), List2 := f_append(PID2), List := f_concat(List, List2), L := f_classifyimage(Img, Clfid), RLOC := Nd, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca3Ins ACTION_REMOTE_SEND<epListTemp(@RLOC, Nd, Id, L, RID, R, List)> :- EVENT_INSERT<pClf(@Nd, Clfid, 1)>, image(@Nd, Id, Img), PID1 := f_sha1(((image+ Nd)+ Id)+ Img), List := f_append(PID1), PID2 := f_sha1(((pClf+ Nd)+ Clfid)+ 1), List2 := f_append(PID2), List := f_concat(List, List2), L := f_classifyimage(Img, Clfid), RLOC := Nd, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_1Eca3Del ACTION_REMOTE_SEND<epListTempDelete(@RLOC, Nd, Id, L, RID, R, List)> :- EVENT_DELETE<pClf(@Nd, Clfid, 1)>, image(@Nd, Id, Img), PID1 := f_sha1(((image+ Nd)+ Id)+ Img), List := f_append(PID1), PID2 := f_sha1(((pClf+ Nd)+ Clfid)+ 1), List2 := f_append(PID2), List := f_concat(List, List2), L := f_classifyimage(Img, Clfid), RLOC := Nd, R := r2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r2_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epListTemp(@RLOC, Nd, Id, L, RID, R, List)>.
ECA Rule prov_r2_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epListTempDelete(@RLOC, Nd, Id, L, RID, R, List)>.
ECA Rule prov_r2_3_ecaAdd ACTION_REMOTE_SEND<epList(@Nd, Id, L, RID, RLOC)> :- EVENT_RECV<epListTemp(@RLOC, Nd, Id, L, RID, R, List)>.
ECA Rule prov_r2_3_ecaDel ACTION_REMOTE_SEND<epListDelete(@Nd, Id, L, RID, RLOC)> :- EVENT_RECV<epListTempDelete(@RLOC, Nd, Id, L, RID, R, List)>.
ECA Rule prov_r2_4_ecaAdd ACTION_LOCAL_SEND<pList(@Nd, Id, L)> :- EVENT_RECV<epList(@Nd, Id, L, RID, RLOC)>.
ECA Rule prov_r2_4_ecaDel ACTION_LOCAL_SEND<pList(@Nd, Id, L)> :- EVENT_RECV<epListDelete(@Nd, Id, L, RID, RLOC)>.
ECA Rule prov_r2_5_ecaAdd ACTION_ADD<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<epList(@Nd, Id, L, RID, RLOC)>, VID := f_sha1(((pList+ Nd)+ Id)+ L).
ECA Rule prov_r2_5_ecaDel ACTION_DELETE<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<epListDelete(@Nd, Id, L, RID, RLOC)>, VID := f_sha1(((pList+ Nd)+ Id)+ L).
ECA Rule prov_r3_1_ecaAdd ACTION_REMOTE_SEND<epIterateTemp(@RLOC, Nd, Id, N, L, RID, R, List)> :- EVENT_RECV<pList(@Nd, Id, L)>, PID1 := f_sha1(((pList+ Nd)+ Id)+ L), List := f_append(PID1), N := 1, RLOC := Nd, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_1_ecaDel ACTION_REMOTE_SEND<epIterateTempDelete(@RLOC, Nd, Id, N, L, RID, R, List)> :- EVENT_RECV<pListDelete(@Nd, Id, L)>, PID1 := f_sha1(((pList+ Nd)+ Id)+ L), List := f_append(PID1), N := 1, RLOC := Nd, R := r3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r3_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epIterateTemp(@RLOC, Nd, Id, N, L, RID, R, List)>.
ECA Rule prov_r3_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epIterateTempDelete(@RLOC, Nd, Id, N, L, RID, R, List)>.
ECA Rule prov_r3_3_ecaAdd ACTION_REMOTE_SEND<epIterate(@Nd, Id, N, L, RID, RLOC)> :- EVENT_RECV<epIterateTemp(@RLOC, Nd, Id, N, L, RID, R, List)>.
ECA Rule prov_r3_3_ecaDel ACTION_REMOTE_SEND<epIterateDelete(@Nd, Id, N, L, RID, RLOC)> :- EVENT_RECV<epIterateTempDelete(@RLOC, Nd, Id, N, L, RID, R, List)>.
ECA Rule prov_r3_4_ecaAdd ACTION_LOCAL_SEND<pIterate(@Nd, Id, N, L)> :- EVENT_RECV<epIterate(@Nd, Id, N, L, RID, RLOC)>.
ECA Rule prov_r3_4_ecaDel ACTION_LOCAL_SEND<pIterate(@Nd, Id, N, L)> :- EVENT_RECV<epIterateDelete(@Nd, Id, N, L, RID, RLOC)>.
ECA Rule prov_r3_5_ecaAdd ACTION_ADD<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<epIterate(@Nd, Id, N, L, RID, RLOC)>, VID := f_sha1((((pIterate+ Nd)+ Id)+ N)+ L).
ECA Rule prov_r3_5_ecaDel ACTION_DELETE<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<epIterateDelete(@Nd, Id, N, L, RID, RLOC)>, VID := f_sha1((((pIterate+ Nd)+ Id)+ N)+ L).
ECA Rule prov_r4_1_ecaAdd ACTION_REMOTE_SEND<epIterateTemp(@RLOC, Nd, Id, N, L, RID, R, List)> :- EVENT_RECV<pIterate(@Nd, Id, N1, L)>, PID1 := f_sha1((((pIterate+ Nd)+ Id)+ N1)+ L), List := f_append(PID1), N1 < f_size(L), N := N1+ 1, RLOC := Nd, R := r4, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r4_1_ecaDel ACTION_REMOTE_SEND<epIterateTempDelete(@RLOC, Nd, Id, N, L, RID, R, List)> :- EVENT_RECV<pIterateDelete(@Nd, Id, N1, L)>, PID1 := f_sha1((((pIterate+ Nd)+ Id)+ N1)+ L), List := f_append(PID1), N1 < f_size(L), N := N1+ 1, RLOC := Nd, R := r4, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r5_1_ecaAdd ACTION_REMOTE_SEND<epredictionTemp(@RLOC, Nd, Id, Item, Prob, RID, R, List)> :- EVENT_RECV<pIterate(@Nd, Id, N, L)>, PID1 := f_sha1((((pIterate+ Nd)+ Id)+ N)+ L), List := f_append(PID1), N <= f_size(L), AnotherList := f_item(L, N), Item := f_item(AnotherList, 1), Prob := f_item(AnotherList, 2), RLOC := Nd, R := r5, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r5_1_ecaDel ACTION_REMOTE_SEND<epredictionTempDelete(@RLOC, Nd, Id, Item, Prob, RID, R, List)> :- EVENT_RECV<pIterateDelete(@Nd, Id, N, L)>, PID1 := f_sha1((((pIterate+ Nd)+ Id)+ N)+ L), List := f_append(PID1), N <= f_size(L), AnotherList := f_item(L, N), Item := f_item(AnotherList, 1), Prob := f_item(AnotherList, 2), RLOC := Nd, R := r5, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r5_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epredictionTemp(@RLOC, Nd, Id, Item, Prob, RID, R, List)>.
ECA Rule prov_r5_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epredictionTempDelete(@RLOC, Nd, Id, Item, Prob, RID, R, List)>.
ECA Rule prov_r5_3_ecaAdd ACTION_REMOTE_SEND<eprediction(@Nd, Id, Item, Prob, RID, RLOC)> :- EVENT_RECV<epredictionTemp(@RLOC, Nd, Id, Item, Prob, RID, R, List)>.
ECA Rule prov_r5_3_ecaDel ACTION_REMOTE_SEND<epredictionDelete(@Nd, Id, Item, Prob, RID, RLOC)> :- EVENT_RECV<epredictionTempDelete(@RLOC, Nd, Id, Item, Prob, RID, R, List)>.
ECA Rule prov_r5_4_ecaAdd ACTION_ADD<prediction(@Nd, Id, Item, Prob)> :- EVENT_RECV<eprediction(@Nd, Id, Item, Prob, RID, RLOC)>.
ECA Rule prov_r5_4_ecaDel ACTION_DELETE<prediction(@Nd, Id, Item, Prob)> :- EVENT_RECV<epredictionDelete(@Nd, Id, Item, Prob, RID, RLOC)>.
ECA Rule prov_r5_5_ecaAdd ACTION_ADD<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<eprediction(@Nd, Id, Item, Prob, RID, RLOC)>, VID := f_sha1((((prediction+ Nd)+ Id)+ Item)+ Prob).
ECA Rule prov_r5_5_ecaDel ACTION_DELETE<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<epredictionDelete(@Nd, Id, Item, Prob, RID, RLOC)>, VID := f_sha1((((prediction+ Nd)+ Id)+ Item)+ Prob).
ECA Rule prov_r6_1Eca0Ins ACTION_REMOTE_SEND<eidentifiedPatternTemp(@RLOC, Nd, Id, Item, Rule, Prob, RID, R, List)> :- EVENT_INSERT<associationrule(@Nd, Item, Rule, Prob1)>, prediction(@Nd, Id, Item, Prob2), PID1 := f_sha1((((associationrule+ Nd)+ Item)+ Rule)+ Prob1), List := f_append(PID1), PID2 := f_sha1((((prediction+ Nd)+ Id)+ Item)+ Prob2), List2 := f_append(PID2), List := f_concat(List, List2), Prob := Prob1* Prob2, RLOC := Nd, R := r6, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r6_1Eca0Del ACTION_REMOTE_SEND<eidentifiedPatternTempDelete(@RLOC, Nd, Id, Item, Rule, Prob, RID, R, List)> :- EVENT_DELETE<associationrule(@Nd, Item, Rule, Prob1)>, prediction(@Nd, Id, Item, Prob2), PID1 := f_sha1((((associationrule+ Nd)+ Item)+ Rule)+ Prob1), List := f_append(PID1), PID2 := f_sha1((((prediction+ Nd)+ Id)+ Item)+ Prob2), List2 := f_append(PID2), List := f_concat(List, List2), Prob := Prob1* Prob2, RLOC := Nd, R := r6, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r6_1Eca3Ins ACTION_REMOTE_SEND<eidentifiedPatternTemp(@RLOC, Nd, Id, Item, Rule, Prob, RID, R, List)> :- EVENT_INSERT<prediction(@Nd, Id, Item, Prob2)>, associationrule(@Nd, Item, Rule, Prob1), PID1 := f_sha1((((associationrule+ Nd)+ Item)+ Rule)+ Prob1), List := f_append(PID1), PID2 := f_sha1((((prediction+ Nd)+ Id)+ Item)+ Prob2), List2 := f_append(PID2), List := f_concat(List, List2), Prob := Prob1* Prob2, RLOC := Nd, R := r6, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r6_1Eca3Del ACTION_REMOTE_SEND<eidentifiedPatternTempDelete(@RLOC, Nd, Id, Item, Rule, Prob, RID, R, List)> :- EVENT_DELETE<prediction(@Nd, Id, Item, Prob2)>, associationrule(@Nd, Item, Rule, Prob1), PID1 := f_sha1((((associationrule+ Nd)+ Item)+ Rule)+ Prob1), List := f_append(PID1), PID2 := f_sha1((((prediction+ Nd)+ Id)+ Item)+ Prob2), List2 := f_append(PID2), List := f_concat(List, List2), Prob := Prob1* Prob2, RLOC := Nd, R := r6, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r6_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<eidentifiedPatternTemp(@RLOC, Nd, Id, Item, Rule, Prob, RID, R, List)>.
ECA Rule prov_r6_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<eidentifiedPatternTempDelete(@RLOC, Nd, Id, Item, Rule, Prob, RID, R, List)>.
ECA Rule prov_r6_3_ecaAdd ACTION_REMOTE_SEND<eidentifiedPattern(@Nd, Id, Item, Rule, Prob, RID, RLOC)> :- EVENT_RECV<eidentifiedPatternTemp(@RLOC, Nd, Id, Item, Rule, Prob, RID, R, List)>.
ECA Rule prov_r6_3_ecaDel ACTION_REMOTE_SEND<eidentifiedPatternDelete(@Nd, Id, Item, Rule, Prob, RID, RLOC)> :- EVENT_RECV<eidentifiedPatternTempDelete(@RLOC, Nd, Id, Item, Rule, Prob, RID, R, List)>.
ECA Rule prov_r6_4_ecaAdd ACTION_ADD<identifiedPattern(@Nd, Id, Item, Rule, Prob)> :- EVENT_RECV<eidentifiedPattern(@Nd, Id, Item, Rule, Prob, RID, RLOC)>.
ECA Rule prov_r6_4_ecaDel ACTION_DELETE<identifiedPattern(@Nd, Id, Item, Rule, Prob)> :- EVENT_RECV<eidentifiedPatternDelete(@Nd, Id, Item, Rule, Prob, RID, RLOC)>.
ECA Rule prov_r6_5_ecaAdd ACTION_ADD<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<eidentifiedPattern(@Nd, Id, Item, Rule, Prob, RID, RLOC)>, VID := f_sha1(((((identifiedPattern+ Nd)+ Id)+ Item)+ Rule)+ Prob).
ECA Rule prov_r6_5_ecaDel ACTION_DELETE<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<eidentifiedPatternDelete(@Nd, Id, Item, Rule, Prob, RID, RLOC)>, VID := f_sha1(((((identifiedPattern+ Nd)+ Id)+ Item)+ Rule)+ Prob).
ECA Rule prov_r7_1Eca0Ins ACTION_REMOTE_SEND<ecListTemp(@RLOC, Nd, Id, L, Rule, Prob, RID, R, List)> :- EVENT_INSERT<identifiedPattern(@Nd, Id, Item, Rule, Prob)>, PID1 := f_sha1(((((identifiedPattern+ Nd)+ Id)+ Item)+ Rule)+ Prob), List := f_append(PID1), L := f_classifyPerson(Rule), RLOC := Nd, R := r7, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r7_1Eca0Del ACTION_REMOTE_SEND<ecListTempDelete(@RLOC, Nd, Id, L, Rule, Prob, RID, R, List)> :- EVENT_DELETE<identifiedPattern(@Nd, Id, Item, Rule, Prob)>, PID1 := f_sha1(((((identifiedPattern+ Nd)+ Id)+ Item)+ Rule)+ Prob), List := f_append(PID1), L := f_classifyPerson(Rule), RLOC := Nd, R := r7, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r7_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<ecListTemp(@RLOC, Nd, Id, L, Rule, Prob, RID, R, List)>.
ECA Rule prov_r7_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<ecListTempDelete(@RLOC, Nd, Id, L, Rule, Prob, RID, R, List)>.
ECA Rule prov_r7_3_ecaAdd ACTION_REMOTE_SEND<ecList(@Nd, Id, L, Rule, Prob, RID, RLOC)> :- EVENT_RECV<ecListTemp(@RLOC, Nd, Id, L, Rule, Prob, RID, R, List)>.
ECA Rule prov_r7_3_ecaDel ACTION_REMOTE_SEND<ecListDelete(@Nd, Id, L, Rule, Prob, RID, RLOC)> :- EVENT_RECV<ecListTempDelete(@RLOC, Nd, Id, L, Rule, Prob, RID, R, List)>.
ECA Rule prov_r7_4_ecaAdd ACTION_LOCAL_SEND<cList(@Nd, Id, L, Rule, Prob)> :- EVENT_RECV<ecList(@Nd, Id, L, Rule, Prob, RID, RLOC)>.
ECA Rule prov_r7_4_ecaDel ACTION_LOCAL_SEND<cList(@Nd, Id, L, Rule, Prob)> :- EVENT_RECV<ecListDelete(@Nd, Id, L, Rule, Prob, RID, RLOC)>.
ECA Rule prov_r7_5_ecaAdd ACTION_ADD<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<ecList(@Nd, Id, L, Rule, Prob, RID, RLOC)>, VID := f_sha1(((((cList+ Nd)+ Id)+ L)+ Rule)+ Prob).
ECA Rule prov_r7_5_ecaDel ACTION_DELETE<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<ecListDelete(@Nd, Id, L, Rule, Prob, RID, RLOC)>, VID := f_sha1(((((cList+ Nd)+ Id)+ L)+ Rule)+ Prob).
ECA Rule prov_r8_1_ecaAdd ACTION_REMOTE_SEND<ecIterateTemp(@RLOC, Nd, Id, N, L, Rule, Prob, RID, R, List)> :- EVENT_RECV<cList(@Nd, Id, L, Rule, Prob)>, PID1 := f_sha1(((((cList+ Nd)+ Id)+ L)+ Rule)+ Prob), List := f_append(PID1), N := 1, 0 < f_size(L), RLOC := Nd, R := r8, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r8_1_ecaDel ACTION_REMOTE_SEND<ecIterateTempDelete(@RLOC, Nd, Id, N, L, Rule, Prob, RID, R, List)> :- EVENT_RECV<cListDelete(@Nd, Id, L, Rule, Prob)>, PID1 := f_sha1(((((cList+ Nd)+ Id)+ L)+ Rule)+ Prob), List := f_append(PID1), N := 1, 0 < f_size(L), RLOC := Nd, R := r8, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r8_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<ecIterateTemp(@RLOC, Nd, Id, N, L, Rule, Prob, RID, R, List)>.
ECA Rule prov_r8_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<ecIterateTempDelete(@RLOC, Nd, Id, N, L, Rule, Prob, RID, R, List)>.
ECA Rule prov_r8_3_ecaAdd ACTION_REMOTE_SEND<ecIterate(@Nd, Id, N, L, Rule, Prob, RID, RLOC)> :- EVENT_RECV<ecIterateTemp(@RLOC, Nd, Id, N, L, Rule, Prob, RID, R, List)>.
ECA Rule prov_r8_3_ecaDel ACTION_REMOTE_SEND<ecIterateDelete(@Nd, Id, N, L, Rule, Prob, RID, RLOC)> :- EVENT_RECV<ecIterateTempDelete(@RLOC, Nd, Id, N, L, Rule, Prob, RID, R, List)>.
ECA Rule prov_r8_4_ecaAdd ACTION_LOCAL_SEND<cIterate(@Nd, Id, N, L, Rule, Prob)> :- EVENT_RECV<ecIterate(@Nd, Id, N, L, Rule, Prob, RID, RLOC)>.
ECA Rule prov_r8_4_ecaDel ACTION_LOCAL_SEND<cIterate(@Nd, Id, N, L, Rule, Prob)> :- EVENT_RECV<ecIterateDelete(@Nd, Id, N, L, Rule, Prob, RID, RLOC)>.
ECA Rule prov_r8_5_ecaAdd ACTION_ADD<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<ecIterate(@Nd, Id, N, L, Rule, Prob, RID, RLOC)>, VID := f_sha1((((((cIterate+ Nd)+ Id)+ N)+ L)+ Rule)+ Prob).
ECA Rule prov_r8_5_ecaDel ACTION_DELETE<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<ecIterateDelete(@Nd, Id, N, L, Rule, Prob, RID, RLOC)>, VID := f_sha1((((((cIterate+ Nd)+ Id)+ N)+ L)+ Rule)+ Prob).
ECA Rule prov_r9_1_ecaAdd ACTION_REMOTE_SEND<ecIterateTemp(@RLOC, Nd, Id, N, L, Rule, Prob, RID, R, List)> :- EVENT_RECV<cIterate(@Nd, Id, N1, L, Rule, Prob)>, PID1 := f_sha1((((((cIterate+ Nd)+ Id)+ N1)+ L)+ Rule)+ Prob), List := f_append(PID1), N1 < f_size(L), N := N1+ 1, RLOC := Nd, R := r9, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r9_1_ecaDel ACTION_REMOTE_SEND<ecIterateTempDelete(@RLOC, Nd, Id, N, L, Rule, Prob, RID, R, List)> :- EVENT_RECV<cIterateDelete(@Nd, Id, N1, L, Rule, Prob)>, PID1 := f_sha1((((((cIterate+ Nd)+ Id)+ N1)+ L)+ Rule)+ Prob), List := f_append(PID1), N1 < f_size(L), N := N1+ 1, RLOC := Nd, R := r9, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r10_1_ecaAdd ACTION_REMOTE_SEND<eresultTemp(@RLOC, Nd, Id, Rule, Person, Prob, RID, R, List)> :- EVENT_RECV<cIterate(@Nd, Id, N, L, Rule, Prob1)>, PID1 := f_sha1((((((cIterate+ Nd)+ Id)+ N)+ L)+ Rule)+ Prob1), List := f_append(PID1), N <= f_size(L), AnotherList := f_item(L, N), Person := f_item(AnotherList, 1), Prob2 := f_item(AnotherList, 2), Prob := Prob1, RLOC := Nd, R := r10, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r10_1_ecaDel ACTION_REMOTE_SEND<eresultTempDelete(@RLOC, Nd, Id, Rule, Person, Prob, RID, R, List)> :- EVENT_RECV<cIterateDelete(@Nd, Id, N, L, Rule, Prob1)>, PID1 := f_sha1((((((cIterate+ Nd)+ Id)+ N)+ L)+ Rule)+ Prob1), List := f_append(PID1), N <= f_size(L), AnotherList := f_item(L, N), Person := f_item(AnotherList, 1), Prob2 := f_item(AnotherList, 2), Prob := Prob1, RLOC := Nd, R := r10, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r10_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<eresultTemp(@RLOC, Nd, Id, Rule, Person, Prob, RID, R, List)>.
ECA Rule prov_r10_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<eresultTempDelete(@RLOC, Nd, Id, Rule, Person, Prob, RID, R, List)>.
ECA Rule prov_r10_3_ecaAdd ACTION_REMOTE_SEND<eresult(@Nd, Id, Rule, Person, Prob, RID, RLOC)> :- EVENT_RECV<eresultTemp(@RLOC, Nd, Id, Rule, Person, Prob, RID, R, List)>.
ECA Rule prov_r10_3_ecaDel ACTION_REMOTE_SEND<eresultDelete(@Nd, Id, Rule, Person, Prob, RID, RLOC)> :- EVENT_RECV<eresultTempDelete(@RLOC, Nd, Id, Rule, Person, Prob, RID, R, List)>.
ECA Rule prov_r10_4_ecaAdd ACTION_ADD<result(@Nd, Id, Rule, Person, Prob)> :- EVENT_RECV<eresult(@Nd, Id, Rule, Person, Prob, RID, RLOC)>.
ECA Rule prov_r10_4_ecaDel ACTION_DELETE<result(@Nd, Id, Rule, Person, Prob)> :- EVENT_RECV<eresultDelete(@Nd, Id, Rule, Person, Prob, RID, RLOC)>.
ECA Rule prov_r10_5_ecaAdd ACTION_ADD<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<eresult(@Nd, Id, Rule, Person, Prob, RID, RLOC)>, VID := f_sha1(((((result+ Nd)+ Id)+ Rule)+ Person)+ Prob).
ECA Rule prov_r10_5_ecaDel ACTION_DELETE<prov(@Nd, VID, RID, RLOC)> :- EVENT_RECV<eresultDelete(@Nd, Id, Rule, Person, Prob, RID, RLOC)>, VID := f_sha1(((((result+ Nd)+ Id)+ Rule)+ Person)+ Prob).
ECA Rule prov_edb_1Eca1Ins ACTION_ADD<prov(@Nd, VID, RID, $1)> :- EVENT_INSERT<associationrule(@Nd, Item, Rule, Prob1)>, $1 := Nd, VID := f_sha1((((associationrule+ Nd)+ Item)+ Rule)+ Prob1), RID := VID.
ECA Rule prov_edb_1Eca1Del ACTION_DELETE<prov(@Nd, VID, RID, $1)> :- EVENT_DELETE<associationrule(@Nd, Item, Rule, Prob1)>, $1 := Nd, VID := f_sha1((((associationrule+ Nd)+ Item)+ Rule)+ Prob1), RID := VID.
ECA Rule prov_edb_2Eca1Ins ACTION_ADD<prov(@Nd, VID, RID, $1)> :- EVENT_INSERT<clf(@Nd, Clfid)>, $1 := Nd, VID := f_sha1((clf+ Nd)+ Clfid), RID := VID.
ECA Rule prov_edb_2Eca1Del ACTION_DELETE<prov(@Nd, VID, RID, $1)> :- EVENT_DELETE<clf(@Nd, Clfid)>, $1 := Nd, VID := f_sha1((clf+ Nd)+ Clfid), RID := VID.
ECA Rule prov_edb_3Eca1Ins ACTION_ADD<prov(@Nd, VID, RID, $1)> :- EVENT_INSERT<image(@Nd, Id, Img)>, $1 := Nd, VID := f_sha1(((image+ Nd)+ Id)+ Img), RID := VID.
ECA Rule prov_edb_3Eca1Del ACTION_DELETE<prov(@Nd, VID, RID, $1)> :- EVENT_DELETE<image(@Nd, Id, Img)>, $1 := Nd, VID := f_sha1(((image+ Nd)+ Id)+ Img), RID := VID.
ECA Rule edb1_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, prov(@X, VID, RID, RLoc), RID == VID, Prov := f_pEDB(VID, X).
ECA Rule idb1_eca ACTION_ADD<pQList(@X, QID, LIST< RID >)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, prov(@X, VID, RID, RLoc), RID != VID.
ECA Rule idb2_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, Buf := f_empty().
ECA Rule idb3_eca ACTION_LOCAL_SEND<pIterate(@X, QID, N)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, N := 1.
ECA Rule idb4_eca ACTION_LOCAL_SEND<pIterate(@X, QID, N)> :- EVENT_RECV<pIterate(@X, QID, N1)>, pQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
ECA Rule idb5_eca ACTION_LOCAL_SEND<eRuleQuery(@X, NQID, RID)> :- EVENT_RECV<pIterate(@X, QID, N)>, pQList(@X, QID, List), N <= f_size(List), RID := f_item(List, N), NQID := f_sha1((+ QID)+ RID).
ECA Rule idb6_eca ACTION_REMOTE_SEND<ruleQuery(@RLoc, QID, RID, X)> :- EVENT_RECV<eRuleQuery(@X, QID, RID)>, prov(@X, VID, RID, RLoc).
ECA Rule idb7_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<rReturn(@X, NQID, RID, Prov)>, pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule idb8Eca0Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pResultTmp(@X, QID, Ret, VID, Buf)>, pQList(@X, QID, List), f_size(Buf) == f_size(List), f_size(Buf) != 0.
ECA Rule idb8Eca1Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pQList(@X, QID, List)>, pResultTmp(@X, QID, Ret, VID, Buf), f_size(Buf) == f_size(List), f_size(Buf) != 0.
ECA Rule idb9_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<ePReturn(@X, QID)>, pResultTmp(@X, QID, Ret, VID, Buf), Prov := f_pIDB(Buf, X).
ECA Rule rv1_eca ACTION_ADD<rQList(@X, QID, List)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, ruleExec(@X, RID, R, List).
ECA Rule rv2_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, Buf := f_empty().
ECA Rule rv3_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, N := 1.
ECA Rule rv4_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<rIterate(@X, QID, N1)>, rQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
ECA Rule rv5_eca ACTION_LOCAL_SEND<eProvQuery(@X, NQID, VID)> :- EVENT_RECV<rIterate(@X, QID, N)>, rQList(@X, QID, List), VID := f_item(List, N), NQID := f_sha1((+ QID)+ VID).
ECA Rule rv6_eca ACTION_LOCAL_SEND<provQuery(@X, QID, VID, $1)> :- EVENT_RECV<eProvQuery(@X, QID, VID)>, $1 := X.
ECA Rule rv7_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<pReturn(@X, NQID, VID, Prov)>, rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule rv8Eca0Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rResultTmp(@X, QID, Ret, RID, Buf)>, rQList(@X, QID, List), f_size(Buf) == f_size(List).
ECA Rule rv8Eca1Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rQList(@X, QID, List)>, rResultTmp(@X, QID, Ret, RID, Buf), f_size(Buf) == f_size(List).
ECA Rule rv9_eca ACTION_REMOTE_SEND<rReturn(@Ret, QID, RID, Prov)> :- EVENT_RECV<eRReturn(@X, QID)>, rResultTmp(@X, QID, Ret, RID, Buf), ruleExec(@X, RID, R, List), Prov := f_pRULE(Buf, X, R).
