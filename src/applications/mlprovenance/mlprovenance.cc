/* A RapidNet application. Generated by RapidNet compiler. */

#include "mlprovenance.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::mlprovenance;

const string Mlprovenance::ASSOCIATIONRULE = "associationrule";
const string Mlprovenance::CITERATE = "cIterate";
const string Mlprovenance::CITERATEDELETE = "cIterateDelete";
const string Mlprovenance::CLIST = "cList";
const string Mlprovenance::CLISTDELETE = "cListDelete";
const string Mlprovenance::CLF = "clf";
const string Mlprovenance::EPRETURN = "ePReturn";
const string Mlprovenance::EPROVQUERY = "eProvQuery";
const string Mlprovenance::ERRETURN = "eRReturn";
const string Mlprovenance::ERULEQUERY = "eRuleQuery";
const string Mlprovenance::ECITERATE = "ecIterate";
const string Mlprovenance::ECITERATEDELETE = "ecIterateDelete";
const string Mlprovenance::ECITERATETEMP = "ecIterateTemp";
const string Mlprovenance::ECITERATETEMPDELETE = "ecIterateTempDelete";
const string Mlprovenance::ECLIST = "ecList";
const string Mlprovenance::ECLISTDELETE = "ecListDelete";
const string Mlprovenance::ECLISTTEMP = "ecListTemp";
const string Mlprovenance::ECLISTTEMPDELETE = "ecListTempDelete";
const string Mlprovenance::EIDENTIFIEDPATTERN = "eidentifiedPattern";
const string Mlprovenance::EIDENTIFIEDPATTERNDELETE = "eidentifiedPatternDelete";
const string Mlprovenance::EIDENTIFIEDPATTERNTEMP = "eidentifiedPatternTemp";
const string Mlprovenance::EIDENTIFIEDPATTERNTEMPDELETE = "eidentifiedPatternTempDelete";
const string Mlprovenance::EPCLF = "epClf";
const string Mlprovenance::EPCLFDELETE = "epClfDelete";
const string Mlprovenance::EPCLFTEMP = "epClfTemp";
const string Mlprovenance::EPCLFTEMPDELETE = "epClfTempDelete";
const string Mlprovenance::EPITERATE = "epIterate";
const string Mlprovenance::EPITERATEDELETE = "epIterateDelete";
const string Mlprovenance::EPITERATETEMP = "epIterateTemp";
const string Mlprovenance::EPITERATETEMPDELETE = "epIterateTempDelete";
const string Mlprovenance::EPLIST = "epList";
const string Mlprovenance::EPLISTDELETE = "epListDelete";
const string Mlprovenance::EPLISTTEMP = "epListTemp";
const string Mlprovenance::EPLISTTEMPDELETE = "epListTempDelete";
const string Mlprovenance::EPREDICTION = "eprediction";
const string Mlprovenance::EPREDICTIONDELETE = "epredictionDelete";
const string Mlprovenance::EPREDICTIONTEMP = "epredictionTemp";
const string Mlprovenance::EPREDICTIONTEMPDELETE = "epredictionTempDelete";
const string Mlprovenance::ERESULT = "eresult";
const string Mlprovenance::ERESULTDELETE = "eresultDelete";
const string Mlprovenance::ERESULTTEMP = "eresultTemp";
const string Mlprovenance::ERESULTTEMPDELETE = "eresultTempDelete";
const string Mlprovenance::IDENTIFIEDPATTERN = "identifiedPattern";
const string Mlprovenance::IMAGE = "image";
const string Mlprovenance::PCLF = "pClf";
const string Mlprovenance::PITERATE = "pIterate";
const string Mlprovenance::PITERATEDELETE = "pIterateDelete";
const string Mlprovenance::PLIST = "pList";
const string Mlprovenance::PLISTDELETE = "pListDelete";
const string Mlprovenance::PQLIST = "pQList";
const string Mlprovenance::PRESULTTMP = "pResultTmp";
const string Mlprovenance::PRETURN = "pReturn";
const string Mlprovenance::PREDICTION = "prediction";
const string Mlprovenance::PROV = "prov";
const string Mlprovenance::PROVQUERY = "provQuery";
const string Mlprovenance::RITERATE = "rIterate";
const string Mlprovenance::RQLIST = "rQList";
const string Mlprovenance::RRESULTTMP = "rResultTmp";
const string Mlprovenance::RRETURN = "rReturn";
const string Mlprovenance::RESULT = "result";
const string Mlprovenance::RULEEXEC = "ruleExec";
const string Mlprovenance::RULEQUERY = "ruleQuery";

NS_LOG_COMPONENT_DEFINE ("Mlprovenance");
NS_OBJECT_ENSURE_REGISTERED (Mlprovenance);

TypeId
Mlprovenance::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::mlprovenance::Mlprovenance")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<Mlprovenance> ()
    ;
  return tid;
}

Mlprovenance::Mlprovenance()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Mlprovenance::~Mlprovenance()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Mlprovenance::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
Mlprovenance::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("Mlprovenance Application Started");
}

void
Mlprovenance::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("Mlprovenance Application Stopped");
}

void
Mlprovenance::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (ASSOCIATIONRULE, attrdeflist (
    attrdef ("associationrule_attr1", IPV4),
    attrdef ("associationrule_attr2", IPV4),
    attrdef ("associationrule_attr3", IPV4),
    attrdef ("associationrule_attr4", IPV4)));

  AddRelationWithKeys (CLF, attrdeflist (
    attrdef ("clf_attr1", IPV4),
    attrdef ("clf_attr2", IPV4)));

  AddRelationWithKeys (IDENTIFIEDPATTERN, attrdeflist (
    attrdef ("identifiedPattern_attr1", IPV4),
    attrdef ("identifiedPattern_attr2", IPV4),
    attrdef ("identifiedPattern_attr3", IPV4),
    attrdef ("identifiedPattern_attr4", IPV4),
    attrdef ("identifiedPattern_attr5", IPV4)));

  AddRelationWithKeys (IMAGE, attrdeflist (
    attrdef ("image_attr1", IPV4),
    attrdef ("image_attr2", IPV4),
    attrdef ("image_attr3", IPV4)));

  AddRelationWithKeys (PCLF, attrdeflist (
    attrdef ("pClf_attr1", IPV4),
    attrdef ("pClf_attr2", IPV4),
    attrdef ("pClf_attr3", IPV4)));

  AddRelationWithKeys (PQLIST, attrdeflist (
    attrdef ("pQList_attr1", IPV4),
    attrdef ("pQList_attr2", ID)));

  AddRelationWithKeys (PRESULTTMP, attrdeflist (
    attrdef ("pResultTmp_attr1", IPV4),
    attrdef ("pResultTmp_attr2", ID)));

  AddRelationWithKeys (PREDICTION, attrdeflist (
    attrdef ("prediction_attr1", IPV4),
    attrdef ("prediction_attr2", IPV4),
    attrdef ("prediction_attr3", IPV4),
    attrdef ("prediction_attr4", IPV4)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr1", IPV4),
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", ID)));

  AddRelationWithKeys (RQLIST, attrdeflist (
    attrdef ("rQList_attr1", IPV4),
    attrdef ("rQList_attr2", ID)));

  AddRelationWithKeys (RRESULTTMP, attrdeflist (
    attrdef ("rResultTmp_attr1", IPV4),
    attrdef ("rResultTmp_attr2", ID)));

  AddRelationWithKeys (RESULT, attrdeflist (
    attrdef ("result_attr1", IPV4),
    attrdef ("result_attr2", IPV4),
    attrdef ("result_attr3", IPV4),
    attrdef ("result_attr4", IPV4),
    attrdef ("result_attr5", IPV4)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr1", IPV4),
    attrdef ("ruleExec_attr2", ID)));

}

void
Mlprovenance::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, CLF))
    {
      Prov_r1_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, CLF))
    {
      Prov_r1_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, EPCLFTEMP))
    {
      Prov_r1_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPCLFTEMPDELETE))
    {
      Prov_r1_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPCLFTEMP))
    {
      Prov_r1_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPCLFTEMPDELETE))
    {
      Prov_r1_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPCLF))
    {
      Prov_r1_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPCLFDELETE))
    {
      Prov_r1_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPCLF))
    {
      Prov_r1_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPCLFDELETE))
    {
      Prov_r1_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, IMAGE))
    {
      Prov_r2_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, IMAGE))
    {
      Prov_r2_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, PCLF))
    {
      Prov_r2_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, PCLF))
    {
      Prov_r2_1Eca3Del (tuple);
    }
  if (IsRecvEvent (tuple, EPLISTTEMP))
    {
      Prov_r2_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPLISTTEMPDELETE))
    {
      Prov_r2_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPLISTTEMP))
    {
      Prov_r2_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPLISTTEMPDELETE))
    {
      Prov_r2_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPLIST))
    {
      Prov_r2_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPLISTDELETE))
    {
      Prov_r2_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPLIST))
    {
      Prov_r2_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPLISTDELETE))
    {
      Prov_r2_5_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, PLIST))
    {
      Prov_r3_1_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, PLISTDELETE))
    {
      Prov_r3_1_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPITERATETEMP))
    {
      Prov_r3_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPITERATETEMPDELETE))
    {
      Prov_r3_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPITERATETEMP))
    {
      Prov_r3_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPITERATETEMPDELETE))
    {
      Prov_r3_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPITERATE))
    {
      Prov_r3_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPITERATEDELETE))
    {
      Prov_r3_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPITERATE))
    {
      Prov_r3_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPITERATEDELETE))
    {
      Prov_r3_5_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Prov_r4_1_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, PITERATEDELETE))
    {
      Prov_r4_1_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Prov_r5_1_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, PITERATEDELETE))
    {
      Prov_r5_1_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPREDICTIONTEMP))
    {
      Prov_r5_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPREDICTIONTEMPDELETE))
    {
      Prov_r5_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPREDICTIONTEMP))
    {
      Prov_r5_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPREDICTIONTEMPDELETE))
    {
      Prov_r5_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPREDICTION))
    {
      Prov_r5_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPREDICTIONDELETE))
    {
      Prov_r5_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPREDICTION))
    {
      Prov_r5_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPREDICTIONDELETE))
    {
      Prov_r5_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, ASSOCIATIONRULE))
    {
      Prov_r6_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, ASSOCIATIONRULE))
    {
      Prov_r6_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, PREDICTION))
    {
      Prov_r6_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, PREDICTION))
    {
      Prov_r6_1Eca3Del (tuple);
    }
  if (IsRecvEvent (tuple, EIDENTIFIEDPATTERNTEMP))
    {
      Prov_r6_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EIDENTIFIEDPATTERNTEMPDELETE))
    {
      Prov_r6_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EIDENTIFIEDPATTERNTEMP))
    {
      Prov_r6_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EIDENTIFIEDPATTERNTEMPDELETE))
    {
      Prov_r6_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EIDENTIFIEDPATTERN))
    {
      Prov_r6_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EIDENTIFIEDPATTERNDELETE))
    {
      Prov_r6_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EIDENTIFIEDPATTERN))
    {
      Prov_r6_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EIDENTIFIEDPATTERNDELETE))
    {
      Prov_r6_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, IDENTIFIEDPATTERN))
    {
      Prov_r7_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, IDENTIFIEDPATTERN))
    {
      Prov_r7_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, ECLISTTEMP))
    {
      Prov_r7_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECLISTTEMPDELETE))
    {
      Prov_r7_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ECLISTTEMP))
    {
      Prov_r7_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECLISTTEMPDELETE))
    {
      Prov_r7_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ECLIST))
    {
      Prov_r7_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECLISTDELETE))
    {
      Prov_r7_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ECLIST))
    {
      Prov_r7_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECLISTDELETE))
    {
      Prov_r7_5_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, CLIST))
    {
      Prov_r8_1_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, CLISTDELETE))
    {
      Prov_r8_1_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ECITERATETEMP))
    {
      Prov_r8_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECITERATETEMPDELETE))
    {
      Prov_r8_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ECITERATETEMP))
    {
      Prov_r8_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECITERATETEMPDELETE))
    {
      Prov_r8_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ECITERATE))
    {
      Prov_r8_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECITERATEDELETE))
    {
      Prov_r8_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ECITERATE))
    {
      Prov_r8_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ECITERATEDELETE))
    {
      Prov_r8_5_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, CITERATE))
    {
      Prov_r9_1_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, CITERATEDELETE))
    {
      Prov_r9_1_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, CITERATE))
    {
      Prov_r10_1_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, CITERATEDELETE))
    {
      Prov_r10_1_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTTEMP))
    {
      Prov_r10_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTTEMPDELETE))
    {
      Prov_r10_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTTEMP))
    {
      Prov_r10_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTTEMPDELETE))
    {
      Prov_r10_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ERESULT))
    {
      Prov_r10_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTDELETE))
    {
      Prov_r10_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, ERESULT))
    {
      Prov_r10_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, ERESULTDELETE))
    {
      Prov_r10_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, ASSOCIATIONRULE))
    {
      Prov_edb_1Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, ASSOCIATIONRULE))
    {
      Prov_edb_1Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, CLF))
    {
      Prov_edb_2Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, CLF))
    {
      Prov_edb_2Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, IMAGE))
    {
      Prov_edb_3Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, IMAGE))
    {
      Prov_edb_3Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Edb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb5_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERULEQUERY))
    {
      Idb6_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Idb7_eca (tuple);
    }
  if (IsInsertEvent (tuple, PRESULTTMP))
    {
      Idb8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PQLIST))
    {
      Idb8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, EPRETURN))
    {
      Idb9_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv4_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv5_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPROVQUERY))
    {
      Rv6_eca (tuple);
    }
  if (IsRecvEvent (tuple, PRETURN))
    {
      Rv7_eca (tuple);
    }
  if (IsInsertEvent (tuple, RRESULTTMP))
    {
      Rv8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, RQLIST))
    {
      Rv8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, ERRETURN))
    {
      Rv9_eca (tuple);
    }
}

void
Mlprovenance::Prov_r1_1Eca0Ins (Ptr<Tuple> clf)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Ins triggered");

  Ptr<Tuple> result = clf;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("clf")),
          VarExpr::New ("clf_attr1")),
        VarExpr::New ("clf_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("Enabled",
    FInitClassifier::New (
      VarExpr::New ("clf_attr2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("clf_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPCLFTEMP,
    strlist ("RLOC",
      "clf_attr1",
      "clf_attr2",
      "Enabled",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epClfTemp_attr1",
      "epClfTemp_attr2",
      "epClfTemp_attr3",
      "epClfTemp_attr4",
      "epClfTemp_attr5",
      "epClfTemp_attr6",
      "epClfTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r1_1Eca0Del (Ptr<Tuple> clf)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Del triggered");

  Ptr<Tuple> result = clf;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("clf")),
          VarExpr::New ("clf_attr1")),
        VarExpr::New ("clf_attr2")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("Enabled",
    FInitClassifier::New (
      VarExpr::New ("clf_attr2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("clf_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPCLFTEMPDELETE,
    strlist ("RLOC",
      "clf_attr1",
      "clf_attr2",
      "Enabled",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epClfTempDelete_attr1",
      "epClfTempDelete_attr2",
      "epClfTempDelete_attr3",
      "epClfTempDelete_attr4",
      "epClfTempDelete_attr5",
      "epClfTempDelete_attr6",
      "epClfTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r1_2_ecaAdd (Ptr<Tuple> epClfTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaAdd triggered");

  Ptr<Tuple> result = epClfTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("epClfTemp_attr1",
      "epClfTemp_attr5",
      "epClfTemp_attr6",
      "epClfTemp_attr7"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r1_2_ecaDel (Ptr<Tuple> epClfTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaDel triggered");

  Ptr<Tuple> result = epClfTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("epClfTempDelete_attr1",
      "epClfTempDelete_attr5",
      "epClfTempDelete_attr6",
      "epClfTempDelete_attr7"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r1_3_ecaAdd (Ptr<Tuple> epClfTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaAdd triggered");

  Ptr<Tuple> result = epClfTemp;

  result = result->Project (
    EPCLF,
    strlist ("epClfTemp_attr2",
      "epClfTemp_attr3",
      "epClfTemp_attr4",
      "epClfTemp_attr5",
      "epClfTemp_attr1",
      "epClfTemp_attr2"),
    strlist ("epClf_attr1",
      "epClf_attr2",
      "epClf_attr3",
      "epClf_attr4",
      "epClf_attr5",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r1_3_ecaDel (Ptr<Tuple> epClfTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaDel triggered");

  Ptr<Tuple> result = epClfTempDelete;

  result = result->Project (
    EPCLFDELETE,
    strlist ("epClfTempDelete_attr2",
      "epClfTempDelete_attr3",
      "epClfTempDelete_attr4",
      "epClfTempDelete_attr5",
      "epClfTempDelete_attr1",
      "epClfTempDelete_attr2"),
    strlist ("epClfDelete_attr1",
      "epClfDelete_attr2",
      "epClfDelete_attr3",
      "epClfDelete_attr4",
      "epClfDelete_attr5",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r1_4_ecaAdd (Ptr<Tuple> epClf)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaAdd triggered");

  Ptr<Tuple> result = epClf;

  result = result->Project (
    PCLF,
    strlist ("epClf_attr1",
      "epClf_attr2",
      "epClf_attr3"),
    strlist ("pClf_attr1",
      "pClf_attr2",
      "pClf_attr3"));

  Insert (result);
}

void
Mlprovenance::Prov_r1_4_ecaDel (Ptr<Tuple> epClfDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaDel triggered");

  Ptr<Tuple> result = epClfDelete;

  result = result->Project (
    PCLF,
    strlist ("epClfDelete_attr1",
      "epClfDelete_attr2",
      "epClfDelete_attr3"),
    strlist ("pClf_attr1",
      "pClf_attr2",
      "pClf_attr3"));

  Delete (result);
}

void
Mlprovenance::Prov_r1_5_ecaAdd (Ptr<Tuple> epClf)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaAdd triggered");

  Ptr<Tuple> result = epClf;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("pClf")),
            VarExpr::New ("epClf_attr1")),
          VarExpr::New ("epClf_attr2")),
        VarExpr::New ("epClf_attr3")))));

  result = result->Project (
    PROV,
    strlist ("epClf_attr1",
      "VID",
      "epClf_attr4",
      "epClf_attr5"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r1_5_ecaDel (Ptr<Tuple> epClfDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaDel triggered");

  Ptr<Tuple> result = epClfDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("pClf")),
            VarExpr::New ("epClfDelete_attr1")),
          VarExpr::New ("epClfDelete_attr2")),
        VarExpr::New ("epClfDelete_attr3")))));

  result = result->Project (
    PROV,
    strlist ("epClfDelete_attr1",
      "VID",
      "epClfDelete_attr4",
      "epClfDelete_attr5"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r2_1Eca0Ins (Ptr<Tuple> image)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PCLF)->Join (
    image,
    strlist ("pClf_attr1"),
    strlist ("image_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("image")),
            VarExpr::New ("image_attr1")),
          VarExpr::New ("image_attr2")),
        VarExpr::New ("image_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("pClf")),
            VarExpr::New ("image_attr1")),
          VarExpr::New ("pClf_attr2")),
        ValueExpr::New (Int32Value::New (1))))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("L",
    FClassifyImage::New (
      VarExpr::New ("image_attr3"),
      VarExpr::New ("pClf_attr2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("image_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPLISTTEMP,
    strlist ("RLOC",
      "image_attr1",
      "image_attr2",
      "L",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epListTemp_attr1",
      "epListTemp_attr2",
      "epListTemp_attr3",
      "epListTemp_attr4",
      "epListTemp_attr5",
      "epListTemp_attr6",
      "epListTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r2_1Eca0Del (Ptr<Tuple> image)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PCLF)->Join (
    image,
    strlist ("pClf_attr1"),
    strlist ("image_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("image")),
            VarExpr::New ("image_attr1")),
          VarExpr::New ("image_attr2")),
        VarExpr::New ("image_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("pClf")),
            VarExpr::New ("image_attr1")),
          VarExpr::New ("pClf_attr2")),
        ValueExpr::New (Int32Value::New (1))))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("L",
    FClassifyImage::New (
      VarExpr::New ("image_attr3"),
      VarExpr::New ("pClf_attr2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("image_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPLISTTEMPDELETE,
    strlist ("RLOC",
      "image_attr1",
      "image_attr2",
      "L",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epListTempDelete_attr1",
      "epListTempDelete_attr2",
      "epListTempDelete_attr3",
      "epListTempDelete_attr4",
      "epListTempDelete_attr5",
      "epListTempDelete_attr6",
      "epListTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r2_1Eca3Ins (Ptr<Tuple> pClf)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (IMAGE)->Join (
    pClf,
    strlist ("image_attr1"),
    strlist ("pClf_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("image")),
            VarExpr::New ("pClf_attr1")),
          VarExpr::New ("image_attr2")),
        VarExpr::New ("image_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("pClf")),
            VarExpr::New ("pClf_attr1")),
          VarExpr::New ("pClf_attr2")),
        ValueExpr::New (Int32Value::New (1))))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("L",
    FClassifyImage::New (
      VarExpr::New ("image_attr3"),
      VarExpr::New ("pClf_attr2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("pClf_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPLISTTEMP,
    strlist ("RLOC",
      "pClf_attr1",
      "image_attr2",
      "L",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epListTemp_attr1",
      "epListTemp_attr2",
      "epListTemp_attr3",
      "epListTemp_attr4",
      "epListTemp_attr5",
      "epListTemp_attr6",
      "epListTemp_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r2_1Eca3Del (Ptr<Tuple> pClf)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (IMAGE)->Join (
    pClf,
    strlist ("image_attr1"),
    strlist ("pClf_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("image")),
            VarExpr::New ("pClf_attr1")),
          VarExpr::New ("image_attr2")),
        VarExpr::New ("image_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("pClf")),
            VarExpr::New ("pClf_attr1")),
          VarExpr::New ("pClf_attr2")),
        ValueExpr::New (Int32Value::New (1))))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("L",
    FClassifyImage::New (
      VarExpr::New ("image_attr3"),
      VarExpr::New ("pClf_attr2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("pClf_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPLISTTEMPDELETE,
    strlist ("RLOC",
      "pClf_attr1",
      "image_attr2",
      "L",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epListTempDelete_attr1",
      "epListTempDelete_attr2",
      "epListTempDelete_attr3",
      "epListTempDelete_attr4",
      "epListTempDelete_attr5",
      "epListTempDelete_attr6",
      "epListTempDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r2_2_ecaAdd (Ptr<Tuple> epListTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r2_2_ecaAdd triggered");

  Ptr<Tuple> result = epListTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("epListTemp_attr1",
      "epListTemp_attr5",
      "epListTemp_attr6",
      "epListTemp_attr7"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r2_2_ecaDel (Ptr<Tuple> epListTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r2_2_ecaDel triggered");

  Ptr<Tuple> result = epListTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("epListTempDelete_attr1",
      "epListTempDelete_attr5",
      "epListTempDelete_attr6",
      "epListTempDelete_attr7"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r2_3_ecaAdd (Ptr<Tuple> epListTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r2_3_ecaAdd triggered");

  Ptr<Tuple> result = epListTemp;

  result = result->Project (
    EPLIST,
    strlist ("epListTemp_attr2",
      "epListTemp_attr3",
      "epListTemp_attr4",
      "epListTemp_attr5",
      "epListTemp_attr1",
      "epListTemp_attr2"),
    strlist ("epList_attr1",
      "epList_attr2",
      "epList_attr3",
      "epList_attr4",
      "epList_attr5",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r2_3_ecaDel (Ptr<Tuple> epListTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r2_3_ecaDel triggered");

  Ptr<Tuple> result = epListTempDelete;

  result = result->Project (
    EPLISTDELETE,
    strlist ("epListTempDelete_attr2",
      "epListTempDelete_attr3",
      "epListTempDelete_attr4",
      "epListTempDelete_attr5",
      "epListTempDelete_attr1",
      "epListTempDelete_attr2"),
    strlist ("epListDelete_attr1",
      "epListDelete_attr2",
      "epListDelete_attr3",
      "epListDelete_attr4",
      "epListDelete_attr5",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r2_4_ecaAdd (Ptr<Tuple> epList)
{
  RAPIDNET_LOG_INFO ("Prov_r2_4_ecaAdd triggered");

  Ptr<Tuple> result = epList;

  result = result->Project (
    PLIST,
    strlist ("epList_attr1",
      "epList_attr2",
      "epList_attr3"),
    strlist ("pList_attr1",
      "pList_attr2",
      "pList_attr3"));

  SendLocal (result);
}

void
Mlprovenance::Prov_r2_4_ecaDel (Ptr<Tuple> epListDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r2_4_ecaDel triggered");

  Ptr<Tuple> result = epListDelete;

  result = result->Project (
    PLIST,
    strlist ("epListDelete_attr1",
      "epListDelete_attr2",
      "epListDelete_attr3"),
    strlist ("pList_attr1",
      "pList_attr2",
      "pList_attr3"));

  SendLocal (result);
}

void
Mlprovenance::Prov_r2_5_ecaAdd (Ptr<Tuple> epList)
{
  RAPIDNET_LOG_INFO ("Prov_r2_5_ecaAdd triggered");

  Ptr<Tuple> result = epList;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("pList")),
            VarExpr::New ("epList_attr1")),
          VarExpr::New ("epList_attr2")),
        VarExpr::New ("epList_attr3")))));

  result = result->Project (
    PROV,
    strlist ("epList_attr1",
      "VID",
      "epList_attr4",
      "epList_attr5"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r2_5_ecaDel (Ptr<Tuple> epListDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r2_5_ecaDel triggered");

  Ptr<Tuple> result = epListDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("pList")),
            VarExpr::New ("epListDelete_attr1")),
          VarExpr::New ("epListDelete_attr2")),
        VarExpr::New ("epListDelete_attr3")))));

  result = result->Project (
    PROV,
    strlist ("epListDelete_attr1",
      "VID",
      "epListDelete_attr4",
      "epListDelete_attr5"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r3_1_ecaAdd (Ptr<Tuple> pList)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1_ecaAdd triggered");

  Ptr<Tuple> result = pList;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("pList")),
            VarExpr::New ("pList_attr1")),
          VarExpr::New ("pList_attr2")),
        VarExpr::New ("pList_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("pList_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPITERATETEMP,
    strlist ("RLOC",
      "pList_attr1",
      "pList_attr2",
      "N",
      "pList_attr3",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epIterateTemp_attr1",
      "epIterateTemp_attr2",
      "epIterateTemp_attr3",
      "epIterateTemp_attr4",
      "epIterateTemp_attr5",
      "epIterateTemp_attr6",
      "epIterateTemp_attr7",
      "epIterateTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r3_1_ecaDel (Ptr<Tuple> pListDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1_ecaDel triggered");

  Ptr<Tuple> result = pListDelete;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("pList")),
            VarExpr::New ("pListDelete_attr1")),
          VarExpr::New ("pListDelete_attr2")),
        VarExpr::New ("pListDelete_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("pListDelete_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPITERATETEMPDELETE,
    strlist ("RLOC",
      "pListDelete_attr1",
      "pListDelete_attr2",
      "N",
      "pListDelete_attr3",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epIterateTempDelete_attr1",
      "epIterateTempDelete_attr2",
      "epIterateTempDelete_attr3",
      "epIterateTempDelete_attr4",
      "epIterateTempDelete_attr5",
      "epIterateTempDelete_attr6",
      "epIterateTempDelete_attr7",
      "epIterateTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r3_2_ecaAdd (Ptr<Tuple> epIterateTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_ecaAdd triggered");

  Ptr<Tuple> result = epIterateTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("epIterateTemp_attr1",
      "epIterateTemp_attr6",
      "epIterateTemp_attr7",
      "epIterateTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r3_2_ecaDel (Ptr<Tuple> epIterateTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_ecaDel triggered");

  Ptr<Tuple> result = epIterateTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("epIterateTempDelete_attr1",
      "epIterateTempDelete_attr6",
      "epIterateTempDelete_attr7",
      "epIterateTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r3_3_ecaAdd (Ptr<Tuple> epIterateTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3_ecaAdd triggered");

  Ptr<Tuple> result = epIterateTemp;

  result = result->Project (
    EPITERATE,
    strlist ("epIterateTemp_attr2",
      "epIterateTemp_attr3",
      "epIterateTemp_attr4",
      "epIterateTemp_attr5",
      "epIterateTemp_attr6",
      "epIterateTemp_attr1",
      "epIterateTemp_attr2"),
    strlist ("epIterate_attr1",
      "epIterate_attr2",
      "epIterate_attr3",
      "epIterate_attr4",
      "epIterate_attr5",
      "epIterate_attr6",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r3_3_ecaDel (Ptr<Tuple> epIterateTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3_ecaDel triggered");

  Ptr<Tuple> result = epIterateTempDelete;

  result = result->Project (
    EPITERATEDELETE,
    strlist ("epIterateTempDelete_attr2",
      "epIterateTempDelete_attr3",
      "epIterateTempDelete_attr4",
      "epIterateTempDelete_attr5",
      "epIterateTempDelete_attr6",
      "epIterateTempDelete_attr1",
      "epIterateTempDelete_attr2"),
    strlist ("epIterateDelete_attr1",
      "epIterateDelete_attr2",
      "epIterateDelete_attr3",
      "epIterateDelete_attr4",
      "epIterateDelete_attr5",
      "epIterateDelete_attr6",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r3_4_ecaAdd (Ptr<Tuple> epIterate)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4_ecaAdd triggered");

  Ptr<Tuple> result = epIterate;

  result = result->Project (
    PITERATE,
    strlist ("epIterate_attr1",
      "epIterate_attr2",
      "epIterate_attr3",
      "epIterate_attr4"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Mlprovenance::Prov_r3_4_ecaDel (Ptr<Tuple> epIterateDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_4_ecaDel triggered");

  Ptr<Tuple> result = epIterateDelete;

  result = result->Project (
    PITERATE,
    strlist ("epIterateDelete_attr1",
      "epIterateDelete_attr2",
      "epIterateDelete_attr3",
      "epIterateDelete_attr4"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3",
      "pIterate_attr4"));

  SendLocal (result);
}

void
Mlprovenance::Prov_r3_5_ecaAdd (Ptr<Tuple> epIterate)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_ecaAdd triggered");

  Ptr<Tuple> result = epIterate;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("pIterate")),
              VarExpr::New ("epIterate_attr1")),
            VarExpr::New ("epIterate_attr2")),
          VarExpr::New ("epIterate_attr3")),
        VarExpr::New ("epIterate_attr4")))));

  result = result->Project (
    PROV,
    strlist ("epIterate_attr1",
      "VID",
      "epIterate_attr5",
      "epIterate_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r3_5_ecaDel (Ptr<Tuple> epIterateDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_ecaDel triggered");

  Ptr<Tuple> result = epIterateDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("pIterate")),
              VarExpr::New ("epIterateDelete_attr1")),
            VarExpr::New ("epIterateDelete_attr2")),
          VarExpr::New ("epIterateDelete_attr3")),
        VarExpr::New ("epIterateDelete_attr4")))));

  result = result->Project (
    PROV,
    strlist ("epIterateDelete_attr1",
      "VID",
      "epIterateDelete_attr5",
      "epIterateDelete_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r4_1_ecaAdd (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Prov_r4_1_ecaAdd triggered");

  Ptr<Tuple> result = pIterate;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("pIterate")),
              VarExpr::New ("pIterate_attr1")),
            VarExpr::New ("pIterate_attr2")),
          VarExpr::New ("pIterate_attr3")),
        VarExpr::New ("pIterate_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("pIterate_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pIterate_attr4")))));

  result = result->Project (
    EPITERATETEMP,
    strlist ("RLOC",
      "pIterate_attr1",
      "pIterate_attr2",
      "N",
      "pIterate_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epIterateTemp_attr1",
      "epIterateTemp_attr2",
      "epIterateTemp_attr3",
      "epIterateTemp_attr4",
      "epIterateTemp_attr5",
      "epIterateTemp_attr6",
      "epIterateTemp_attr7",
      "epIterateTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r4_1_ecaDel (Ptr<Tuple> pIterateDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r4_1_ecaDel triggered");

  Ptr<Tuple> result = pIterateDelete;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("pIterate")),
              VarExpr::New ("pIterateDelete_attr1")),
            VarExpr::New ("pIterateDelete_attr2")),
          VarExpr::New ("pIterateDelete_attr3")),
        VarExpr::New ("pIterateDelete_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterateDelete_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("pIterateDelete_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r4"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterateDelete_attr3"),
      FSize::New (
        VarExpr::New ("pIterateDelete_attr4")))));

  result = result->Project (
    EPITERATETEMPDELETE,
    strlist ("RLOC",
      "pIterateDelete_attr1",
      "pIterateDelete_attr2",
      "N",
      "pIterateDelete_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epIterateTempDelete_attr1",
      "epIterateTempDelete_attr2",
      "epIterateTempDelete_attr3",
      "epIterateTempDelete_attr4",
      "epIterateTempDelete_attr5",
      "epIterateTempDelete_attr6",
      "epIterateTempDelete_attr7",
      "epIterateTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r5_1_ecaAdd (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Prov_r5_1_ecaAdd triggered");

  Ptr<Tuple> result = pIterate;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("pIterate")),
              VarExpr::New ("pIterate_attr1")),
            VarExpr::New ("pIterate_attr2")),
          VarExpr::New ("pIterate_attr3")),
        VarExpr::New ("pIterate_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("AnotherList",
    FItem::New (
      VarExpr::New ("pIterate_attr4"),
      VarExpr::New ("pIterate_attr3"))));

  result->Assign (Assignor::New ("Item",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Prob",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (2)))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("pIterate_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pIterate_attr4")))));

  result = result->Project (
    EPREDICTIONTEMP,
    strlist ("RLOC",
      "pIterate_attr1",
      "pIterate_attr2",
      "Item",
      "Prob",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epredictionTemp_attr1",
      "epredictionTemp_attr2",
      "epredictionTemp_attr3",
      "epredictionTemp_attr4",
      "epredictionTemp_attr5",
      "epredictionTemp_attr6",
      "epredictionTemp_attr7",
      "epredictionTemp_attr8",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r5_1_ecaDel (Ptr<Tuple> pIterateDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r5_1_ecaDel triggered");

  Ptr<Tuple> result = pIterateDelete;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("pIterate")),
              VarExpr::New ("pIterateDelete_attr1")),
            VarExpr::New ("pIterateDelete_attr2")),
          VarExpr::New ("pIterateDelete_attr3")),
        VarExpr::New ("pIterateDelete_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("AnotherList",
    FItem::New (
      VarExpr::New ("pIterateDelete_attr4"),
      VarExpr::New ("pIterateDelete_attr3"))));

  result->Assign (Assignor::New ("Item",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Prob",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (2)))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("pIterateDelete_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r5"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterateDelete_attr3"),
      FSize::New (
        VarExpr::New ("pIterateDelete_attr4")))));

  result = result->Project (
    EPREDICTIONTEMPDELETE,
    strlist ("RLOC",
      "pIterateDelete_attr1",
      "pIterateDelete_attr2",
      "Item",
      "Prob",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epredictionTempDelete_attr1",
      "epredictionTempDelete_attr2",
      "epredictionTempDelete_attr3",
      "epredictionTempDelete_attr4",
      "epredictionTempDelete_attr5",
      "epredictionTempDelete_attr6",
      "epredictionTempDelete_attr7",
      "epredictionTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r5_2_ecaAdd (Ptr<Tuple> epredictionTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r5_2_ecaAdd triggered");

  Ptr<Tuple> result = epredictionTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("epredictionTemp_attr1",
      "epredictionTemp_attr6",
      "epredictionTemp_attr7",
      "epredictionTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r5_2_ecaDel (Ptr<Tuple> epredictionTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r5_2_ecaDel triggered");

  Ptr<Tuple> result = epredictionTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("epredictionTempDelete_attr1",
      "epredictionTempDelete_attr6",
      "epredictionTempDelete_attr7",
      "epredictionTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r5_3_ecaAdd (Ptr<Tuple> epredictionTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r5_3_ecaAdd triggered");

  Ptr<Tuple> result = epredictionTemp;

  result = result->Project (
    EPREDICTION,
    strlist ("epredictionTemp_attr2",
      "epredictionTemp_attr3",
      "epredictionTemp_attr4",
      "epredictionTemp_attr5",
      "epredictionTemp_attr6",
      "epredictionTemp_attr1",
      "epredictionTemp_attr2"),
    strlist ("eprediction_attr1",
      "eprediction_attr2",
      "eprediction_attr3",
      "eprediction_attr4",
      "eprediction_attr5",
      "eprediction_attr6",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r5_3_ecaDel (Ptr<Tuple> epredictionTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r5_3_ecaDel triggered");

  Ptr<Tuple> result = epredictionTempDelete;

  result = result->Project (
    EPREDICTIONDELETE,
    strlist ("epredictionTempDelete_attr2",
      "epredictionTempDelete_attr3",
      "epredictionTempDelete_attr4",
      "epredictionTempDelete_attr5",
      "epredictionTempDelete_attr6",
      "epredictionTempDelete_attr1",
      "epredictionTempDelete_attr2"),
    strlist ("epredictionDelete_attr1",
      "epredictionDelete_attr2",
      "epredictionDelete_attr3",
      "epredictionDelete_attr4",
      "epredictionDelete_attr5",
      "epredictionDelete_attr6",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r5_4_ecaAdd (Ptr<Tuple> eprediction)
{
  RAPIDNET_LOG_INFO ("Prov_r5_4_ecaAdd triggered");

  Ptr<Tuple> result = eprediction;

  result = result->Project (
    PREDICTION,
    strlist ("eprediction_attr1",
      "eprediction_attr2",
      "eprediction_attr3",
      "eprediction_attr4"),
    strlist ("prediction_attr1",
      "prediction_attr2",
      "prediction_attr3",
      "prediction_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r5_4_ecaDel (Ptr<Tuple> epredictionDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r5_4_ecaDel triggered");

  Ptr<Tuple> result = epredictionDelete;

  result = result->Project (
    PREDICTION,
    strlist ("epredictionDelete_attr1",
      "epredictionDelete_attr2",
      "epredictionDelete_attr3",
      "epredictionDelete_attr4"),
    strlist ("prediction_attr1",
      "prediction_attr2",
      "prediction_attr3",
      "prediction_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r5_5_ecaAdd (Ptr<Tuple> eprediction)
{
  RAPIDNET_LOG_INFO ("Prov_r5_5_ecaAdd triggered");

  Ptr<Tuple> result = eprediction;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("prediction")),
              VarExpr::New ("eprediction_attr1")),
            VarExpr::New ("eprediction_attr2")),
          VarExpr::New ("eprediction_attr3")),
        VarExpr::New ("eprediction_attr4")))));

  result = result->Project (
    PROV,
    strlist ("eprediction_attr1",
      "VID",
      "eprediction_attr5",
      "eprediction_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r5_5_ecaDel (Ptr<Tuple> epredictionDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r5_5_ecaDel triggered");

  Ptr<Tuple> result = epredictionDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("prediction")),
              VarExpr::New ("epredictionDelete_attr1")),
            VarExpr::New ("epredictionDelete_attr2")),
          VarExpr::New ("epredictionDelete_attr3")),
        VarExpr::New ("epredictionDelete_attr4")))));

  result = result->Project (
    PROV,
    strlist ("epredictionDelete_attr1",
      "VID",
      "epredictionDelete_attr5",
      "epredictionDelete_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r6_1Eca0Ins (Ptr<Tuple> associationrule)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PREDICTION)->Join (
    associationrule,
    strlist ("prediction_attr3", "prediction_attr1"),
    strlist ("associationrule_attr2", "associationrule_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("associationrule")),
              VarExpr::New ("associationrule_attr1")),
            VarExpr::New ("associationrule_attr2")),
          VarExpr::New ("associationrule_attr3")),
        VarExpr::New ("associationrule_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("prediction")),
              VarExpr::New ("associationrule_attr1")),
            VarExpr::New ("prediction_attr2")),
          VarExpr::New ("associationrule_attr2")),
        VarExpr::New ("prediction_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("Prob",
    Operation::New (RN_TIMES,
      VarExpr::New ("associationrule_attr4"),
      VarExpr::New ("prediction_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("associationrule_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EIDENTIFIEDPATTERNTEMP,
    strlist ("RLOC",
      "associationrule_attr1",
      "prediction_attr2",
      "associationrule_attr2",
      "associationrule_attr3",
      "Prob",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("eidentifiedPatternTemp_attr1",
      "eidentifiedPatternTemp_attr2",
      "eidentifiedPatternTemp_attr3",
      "eidentifiedPatternTemp_attr4",
      "eidentifiedPatternTemp_attr5",
      "eidentifiedPatternTemp_attr6",
      "eidentifiedPatternTemp_attr7",
      "eidentifiedPatternTemp_attr8",
      "eidentifiedPatternTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r6_1Eca0Del (Ptr<Tuple> associationrule)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PREDICTION)->Join (
    associationrule,
    strlist ("prediction_attr3", "prediction_attr1"),
    strlist ("associationrule_attr2", "associationrule_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("associationrule")),
              VarExpr::New ("associationrule_attr1")),
            VarExpr::New ("associationrule_attr2")),
          VarExpr::New ("associationrule_attr3")),
        VarExpr::New ("associationrule_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("prediction")),
              VarExpr::New ("associationrule_attr1")),
            VarExpr::New ("prediction_attr2")),
          VarExpr::New ("associationrule_attr2")),
        VarExpr::New ("prediction_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("Prob",
    Operation::New (RN_TIMES,
      VarExpr::New ("associationrule_attr4"),
      VarExpr::New ("prediction_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("associationrule_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EIDENTIFIEDPATTERNTEMPDELETE,
    strlist ("RLOC",
      "associationrule_attr1",
      "prediction_attr2",
      "associationrule_attr2",
      "associationrule_attr3",
      "Prob",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("eidentifiedPatternTempDelete_attr1",
      "eidentifiedPatternTempDelete_attr2",
      "eidentifiedPatternTempDelete_attr3",
      "eidentifiedPatternTempDelete_attr4",
      "eidentifiedPatternTempDelete_attr5",
      "eidentifiedPatternTempDelete_attr6",
      "eidentifiedPatternTempDelete_attr7",
      "eidentifiedPatternTempDelete_attr8",
      "eidentifiedPatternTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r6_1Eca3Ins (Ptr<Tuple> prediction)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ASSOCIATIONRULE)->Join (
    prediction,
    strlist ("associationrule_attr2", "associationrule_attr1"),
    strlist ("prediction_attr3", "prediction_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("associationrule")),
              VarExpr::New ("prediction_attr1")),
            VarExpr::New ("prediction_attr3")),
          VarExpr::New ("associationrule_attr3")),
        VarExpr::New ("associationrule_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("prediction")),
              VarExpr::New ("prediction_attr1")),
            VarExpr::New ("prediction_attr2")),
          VarExpr::New ("prediction_attr3")),
        VarExpr::New ("prediction_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("Prob",
    Operation::New (RN_TIMES,
      VarExpr::New ("associationrule_attr4"),
      VarExpr::New ("prediction_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("prediction_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EIDENTIFIEDPATTERNTEMP,
    strlist ("RLOC",
      "prediction_attr1",
      "prediction_attr2",
      "prediction_attr3",
      "associationrule_attr3",
      "Prob",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("eidentifiedPatternTemp_attr1",
      "eidentifiedPatternTemp_attr2",
      "eidentifiedPatternTemp_attr3",
      "eidentifiedPatternTemp_attr4",
      "eidentifiedPatternTemp_attr5",
      "eidentifiedPatternTemp_attr6",
      "eidentifiedPatternTemp_attr7",
      "eidentifiedPatternTemp_attr8",
      "eidentifiedPatternTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r6_1Eca3Del (Ptr<Tuple> prediction)
{
  RAPIDNET_LOG_INFO ("Prov_r6_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (ASSOCIATIONRULE)->Join (
    prediction,
    strlist ("associationrule_attr2", "associationrule_attr1"),
    strlist ("prediction_attr3", "prediction_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("associationrule")),
              VarExpr::New ("prediction_attr1")),
            VarExpr::New ("prediction_attr3")),
          VarExpr::New ("associationrule_attr3")),
        VarExpr::New ("associationrule_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("prediction")),
              VarExpr::New ("prediction_attr1")),
            VarExpr::New ("prediction_attr2")),
          VarExpr::New ("prediction_attr3")),
        VarExpr::New ("prediction_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("Prob",
    Operation::New (RN_TIMES,
      VarExpr::New ("associationrule_attr4"),
      VarExpr::New ("prediction_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("prediction_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r6"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EIDENTIFIEDPATTERNTEMPDELETE,
    strlist ("RLOC",
      "prediction_attr1",
      "prediction_attr2",
      "prediction_attr3",
      "associationrule_attr3",
      "Prob",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("eidentifiedPatternTempDelete_attr1",
      "eidentifiedPatternTempDelete_attr2",
      "eidentifiedPatternTempDelete_attr3",
      "eidentifiedPatternTempDelete_attr4",
      "eidentifiedPatternTempDelete_attr5",
      "eidentifiedPatternTempDelete_attr6",
      "eidentifiedPatternTempDelete_attr7",
      "eidentifiedPatternTempDelete_attr8",
      "eidentifiedPatternTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r6_2_ecaAdd (Ptr<Tuple> eidentifiedPatternTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r6_2_ecaAdd triggered");

  Ptr<Tuple> result = eidentifiedPatternTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eidentifiedPatternTemp_attr1",
      "eidentifiedPatternTemp_attr7",
      "eidentifiedPatternTemp_attr8",
      "eidentifiedPatternTemp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r6_2_ecaDel (Ptr<Tuple> eidentifiedPatternTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r6_2_ecaDel triggered");

  Ptr<Tuple> result = eidentifiedPatternTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("eidentifiedPatternTempDelete_attr1",
      "eidentifiedPatternTempDelete_attr7",
      "eidentifiedPatternTempDelete_attr8",
      "eidentifiedPatternTempDelete_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r6_3_ecaAdd (Ptr<Tuple> eidentifiedPatternTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r6_3_ecaAdd triggered");

  Ptr<Tuple> result = eidentifiedPatternTemp;

  result = result->Project (
    EIDENTIFIEDPATTERN,
    strlist ("eidentifiedPatternTemp_attr2",
      "eidentifiedPatternTemp_attr3",
      "eidentifiedPatternTemp_attr4",
      "eidentifiedPatternTemp_attr5",
      "eidentifiedPatternTemp_attr6",
      "eidentifiedPatternTemp_attr7",
      "eidentifiedPatternTemp_attr1",
      "eidentifiedPatternTemp_attr2"),
    strlist ("eidentifiedPattern_attr1",
      "eidentifiedPattern_attr2",
      "eidentifiedPattern_attr3",
      "eidentifiedPattern_attr4",
      "eidentifiedPattern_attr5",
      "eidentifiedPattern_attr6",
      "eidentifiedPattern_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r6_3_ecaDel (Ptr<Tuple> eidentifiedPatternTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r6_3_ecaDel triggered");

  Ptr<Tuple> result = eidentifiedPatternTempDelete;

  result = result->Project (
    EIDENTIFIEDPATTERNDELETE,
    strlist ("eidentifiedPatternTempDelete_attr2",
      "eidentifiedPatternTempDelete_attr3",
      "eidentifiedPatternTempDelete_attr4",
      "eidentifiedPatternTempDelete_attr5",
      "eidentifiedPatternTempDelete_attr6",
      "eidentifiedPatternTempDelete_attr7",
      "eidentifiedPatternTempDelete_attr1",
      "eidentifiedPatternTempDelete_attr2"),
    strlist ("eidentifiedPatternDelete_attr1",
      "eidentifiedPatternDelete_attr2",
      "eidentifiedPatternDelete_attr3",
      "eidentifiedPatternDelete_attr4",
      "eidentifiedPatternDelete_attr5",
      "eidentifiedPatternDelete_attr6",
      "eidentifiedPatternDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r6_4_ecaAdd (Ptr<Tuple> eidentifiedPattern)
{
  RAPIDNET_LOG_INFO ("Prov_r6_4_ecaAdd triggered");

  Ptr<Tuple> result = eidentifiedPattern;

  result = result->Project (
    IDENTIFIEDPATTERN,
    strlist ("eidentifiedPattern_attr1",
      "eidentifiedPattern_attr2",
      "eidentifiedPattern_attr3",
      "eidentifiedPattern_attr4",
      "eidentifiedPattern_attr5"),
    strlist ("identifiedPattern_attr1",
      "identifiedPattern_attr2",
      "identifiedPattern_attr3",
      "identifiedPattern_attr4",
      "identifiedPattern_attr5"));

  Insert (result);
}

void
Mlprovenance::Prov_r6_4_ecaDel (Ptr<Tuple> eidentifiedPatternDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r6_4_ecaDel triggered");

  Ptr<Tuple> result = eidentifiedPatternDelete;

  result = result->Project (
    IDENTIFIEDPATTERN,
    strlist ("eidentifiedPatternDelete_attr1",
      "eidentifiedPatternDelete_attr2",
      "eidentifiedPatternDelete_attr3",
      "eidentifiedPatternDelete_attr4",
      "eidentifiedPatternDelete_attr5"),
    strlist ("identifiedPattern_attr1",
      "identifiedPattern_attr2",
      "identifiedPattern_attr3",
      "identifiedPattern_attr4",
      "identifiedPattern_attr5"));

  Delete (result);
}

void
Mlprovenance::Prov_r6_5_ecaAdd (Ptr<Tuple> eidentifiedPattern)
{
  RAPIDNET_LOG_INFO ("Prov_r6_5_ecaAdd triggered");

  Ptr<Tuple> result = eidentifiedPattern;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("identifiedPattern")),
                VarExpr::New ("eidentifiedPattern_attr1")),
              VarExpr::New ("eidentifiedPattern_attr2")),
            VarExpr::New ("eidentifiedPattern_attr3")),
          VarExpr::New ("eidentifiedPattern_attr4")),
        VarExpr::New ("eidentifiedPattern_attr5")))));

  result = result->Project (
    PROV,
    strlist ("eidentifiedPattern_attr1",
      "VID",
      "eidentifiedPattern_attr6",
      "eidentifiedPattern_attr7"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r6_5_ecaDel (Ptr<Tuple> eidentifiedPatternDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r6_5_ecaDel triggered");

  Ptr<Tuple> result = eidentifiedPatternDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("identifiedPattern")),
                VarExpr::New ("eidentifiedPatternDelete_attr1")),
              VarExpr::New ("eidentifiedPatternDelete_attr2")),
            VarExpr::New ("eidentifiedPatternDelete_attr3")),
          VarExpr::New ("eidentifiedPatternDelete_attr4")),
        VarExpr::New ("eidentifiedPatternDelete_attr5")))));

  result = result->Project (
    PROV,
    strlist ("eidentifiedPatternDelete_attr1",
      "VID",
      "eidentifiedPatternDelete_attr6",
      "eidentifiedPatternDelete_attr7"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r7_1Eca0Ins (Ptr<Tuple> identifiedPattern)
{
  RAPIDNET_LOG_INFO ("Prov_r7_1Eca0Ins triggered");

  Ptr<Tuple> result = identifiedPattern;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("identifiedPattern")),
                VarExpr::New ("identifiedPattern_attr1")),
              VarExpr::New ("identifiedPattern_attr2")),
            VarExpr::New ("identifiedPattern_attr3")),
          VarExpr::New ("identifiedPattern_attr4")),
        VarExpr::New ("identifiedPattern_attr5")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("L",
    FClassifyPerson::New (
      VarExpr::New ("identifiedPattern_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("identifiedPattern_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r7"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ECLISTTEMP,
    strlist ("RLOC",
      "identifiedPattern_attr1",
      "identifiedPattern_attr2",
      "L",
      "identifiedPattern_attr4",
      "identifiedPattern_attr5",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("ecListTemp_attr1",
      "ecListTemp_attr2",
      "ecListTemp_attr3",
      "ecListTemp_attr4",
      "ecListTemp_attr5",
      "ecListTemp_attr6",
      "ecListTemp_attr7",
      "ecListTemp_attr8",
      "ecListTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r7_1Eca0Del (Ptr<Tuple> identifiedPattern)
{
  RAPIDNET_LOG_INFO ("Prov_r7_1Eca0Del triggered");

  Ptr<Tuple> result = identifiedPattern;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("identifiedPattern")),
                VarExpr::New ("identifiedPattern_attr1")),
              VarExpr::New ("identifiedPattern_attr2")),
            VarExpr::New ("identifiedPattern_attr3")),
          VarExpr::New ("identifiedPattern_attr4")),
        VarExpr::New ("identifiedPattern_attr5")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("L",
    FClassifyPerson::New (
      VarExpr::New ("identifiedPattern_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("identifiedPattern_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r7"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    ECLISTTEMPDELETE,
    strlist ("RLOC",
      "identifiedPattern_attr1",
      "identifiedPattern_attr2",
      "L",
      "identifiedPattern_attr4",
      "identifiedPattern_attr5",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("ecListTempDelete_attr1",
      "ecListTempDelete_attr2",
      "ecListTempDelete_attr3",
      "ecListTempDelete_attr4",
      "ecListTempDelete_attr5",
      "ecListTempDelete_attr6",
      "ecListTempDelete_attr7",
      "ecListTempDelete_attr8",
      "ecListTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r7_2_ecaAdd (Ptr<Tuple> ecListTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r7_2_ecaAdd triggered");

  Ptr<Tuple> result = ecListTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("ecListTemp_attr1",
      "ecListTemp_attr7",
      "ecListTemp_attr8",
      "ecListTemp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r7_2_ecaDel (Ptr<Tuple> ecListTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r7_2_ecaDel triggered");

  Ptr<Tuple> result = ecListTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("ecListTempDelete_attr1",
      "ecListTempDelete_attr7",
      "ecListTempDelete_attr8",
      "ecListTempDelete_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r7_3_ecaAdd (Ptr<Tuple> ecListTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r7_3_ecaAdd triggered");

  Ptr<Tuple> result = ecListTemp;

  result = result->Project (
    ECLIST,
    strlist ("ecListTemp_attr2",
      "ecListTemp_attr3",
      "ecListTemp_attr4",
      "ecListTemp_attr5",
      "ecListTemp_attr6",
      "ecListTemp_attr7",
      "ecListTemp_attr1",
      "ecListTemp_attr2"),
    strlist ("ecList_attr1",
      "ecList_attr2",
      "ecList_attr3",
      "ecList_attr4",
      "ecList_attr5",
      "ecList_attr6",
      "ecList_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r7_3_ecaDel (Ptr<Tuple> ecListTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r7_3_ecaDel triggered");

  Ptr<Tuple> result = ecListTempDelete;

  result = result->Project (
    ECLISTDELETE,
    strlist ("ecListTempDelete_attr2",
      "ecListTempDelete_attr3",
      "ecListTempDelete_attr4",
      "ecListTempDelete_attr5",
      "ecListTempDelete_attr6",
      "ecListTempDelete_attr7",
      "ecListTempDelete_attr1",
      "ecListTempDelete_attr2"),
    strlist ("ecListDelete_attr1",
      "ecListDelete_attr2",
      "ecListDelete_attr3",
      "ecListDelete_attr4",
      "ecListDelete_attr5",
      "ecListDelete_attr6",
      "ecListDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r7_4_ecaAdd (Ptr<Tuple> ecList)
{
  RAPIDNET_LOG_INFO ("Prov_r7_4_ecaAdd triggered");

  Ptr<Tuple> result = ecList;

  result = result->Project (
    CLIST,
    strlist ("ecList_attr1",
      "ecList_attr2",
      "ecList_attr3",
      "ecList_attr4",
      "ecList_attr5"),
    strlist ("cList_attr1",
      "cList_attr2",
      "cList_attr3",
      "cList_attr4",
      "cList_attr5"));

  SendLocal (result);
}

void
Mlprovenance::Prov_r7_4_ecaDel (Ptr<Tuple> ecListDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r7_4_ecaDel triggered");

  Ptr<Tuple> result = ecListDelete;

  result = result->Project (
    CLIST,
    strlist ("ecListDelete_attr1",
      "ecListDelete_attr2",
      "ecListDelete_attr3",
      "ecListDelete_attr4",
      "ecListDelete_attr5"),
    strlist ("cList_attr1",
      "cList_attr2",
      "cList_attr3",
      "cList_attr4",
      "cList_attr5"));

  SendLocal (result);
}

void
Mlprovenance::Prov_r7_5_ecaAdd (Ptr<Tuple> ecList)
{
  RAPIDNET_LOG_INFO ("Prov_r7_5_ecaAdd triggered");

  Ptr<Tuple> result = ecList;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("cList")),
                VarExpr::New ("ecList_attr1")),
              VarExpr::New ("ecList_attr2")),
            VarExpr::New ("ecList_attr3")),
          VarExpr::New ("ecList_attr4")),
        VarExpr::New ("ecList_attr5")))));

  result = result->Project (
    PROV,
    strlist ("ecList_attr1",
      "VID",
      "ecList_attr6",
      "ecList_attr7"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r7_5_ecaDel (Ptr<Tuple> ecListDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r7_5_ecaDel triggered");

  Ptr<Tuple> result = ecListDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("cList")),
                VarExpr::New ("ecListDelete_attr1")),
              VarExpr::New ("ecListDelete_attr2")),
            VarExpr::New ("ecListDelete_attr3")),
          VarExpr::New ("ecListDelete_attr4")),
        VarExpr::New ("ecListDelete_attr5")))));

  result = result->Project (
    PROV,
    strlist ("ecListDelete_attr1",
      "VID",
      "ecListDelete_attr6",
      "ecListDelete_attr7"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r8_1_ecaAdd (Ptr<Tuple> cList)
{
  RAPIDNET_LOG_INFO ("Prov_r8_1_ecaAdd triggered");

  Ptr<Tuple> result = cList;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("cList")),
                VarExpr::New ("cList_attr1")),
              VarExpr::New ("cList_attr2")),
            VarExpr::New ("cList_attr3")),
          VarExpr::New ("cList_attr4")),
        VarExpr::New ("cList_attr5")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("cList_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r8"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      ValueExpr::New (Int32Value::New (0)),
      FSize::New (
        VarExpr::New ("cList_attr3")))));

  result = result->Project (
    ECITERATETEMP,
    strlist ("RLOC",
      "cList_attr1",
      "cList_attr2",
      "N",
      "cList_attr3",
      "cList_attr4",
      "cList_attr5",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("ecIterateTemp_attr1",
      "ecIterateTemp_attr2",
      "ecIterateTemp_attr3",
      "ecIterateTemp_attr4",
      "ecIterateTemp_attr5",
      "ecIterateTemp_attr6",
      "ecIterateTemp_attr7",
      "ecIterateTemp_attr8",
      "ecIterateTemp_attr9",
      "ecIterateTemp_attr10",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r8_1_ecaDel (Ptr<Tuple> cListDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r8_1_ecaDel triggered");

  Ptr<Tuple> result = cListDelete;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("cList")),
                VarExpr::New ("cListDelete_attr1")),
              VarExpr::New ("cListDelete_attr2")),
            VarExpr::New ("cListDelete_attr3")),
          VarExpr::New ("cListDelete_attr4")),
        VarExpr::New ("cListDelete_attr5")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("cListDelete_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r8"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      ValueExpr::New (Int32Value::New (0)),
      FSize::New (
        VarExpr::New ("cListDelete_attr3")))));

  result = result->Project (
    ECITERATETEMPDELETE,
    strlist ("RLOC",
      "cListDelete_attr1",
      "cListDelete_attr2",
      "N",
      "cListDelete_attr3",
      "cListDelete_attr4",
      "cListDelete_attr5",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("ecIterateTempDelete_attr1",
      "ecIterateTempDelete_attr2",
      "ecIterateTempDelete_attr3",
      "ecIterateTempDelete_attr4",
      "ecIterateTempDelete_attr5",
      "ecIterateTempDelete_attr6",
      "ecIterateTempDelete_attr7",
      "ecIterateTempDelete_attr8",
      "ecIterateTempDelete_attr9",
      "ecIterateTempDelete_attr10",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r8_2_ecaAdd (Ptr<Tuple> ecIterateTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r8_2_ecaAdd triggered");

  Ptr<Tuple> result = ecIterateTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("ecIterateTemp_attr1",
      "ecIterateTemp_attr8",
      "ecIterateTemp_attr9",
      "ecIterateTemp_attr10"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r8_2_ecaDel (Ptr<Tuple> ecIterateTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r8_2_ecaDel triggered");

  Ptr<Tuple> result = ecIterateTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("ecIterateTempDelete_attr1",
      "ecIterateTempDelete_attr8",
      "ecIterateTempDelete_attr9",
      "ecIterateTempDelete_attr10"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r8_3_ecaAdd (Ptr<Tuple> ecIterateTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r8_3_ecaAdd triggered");

  Ptr<Tuple> result = ecIterateTemp;

  result = result->Project (
    ECITERATE,
    strlist ("ecIterateTemp_attr2",
      "ecIterateTemp_attr3",
      "ecIterateTemp_attr4",
      "ecIterateTemp_attr5",
      "ecIterateTemp_attr6",
      "ecIterateTemp_attr7",
      "ecIterateTemp_attr8",
      "ecIterateTemp_attr1",
      "ecIterateTemp_attr2"),
    strlist ("ecIterate_attr1",
      "ecIterate_attr2",
      "ecIterate_attr3",
      "ecIterate_attr4",
      "ecIterate_attr5",
      "ecIterate_attr6",
      "ecIterate_attr7",
      "ecIterate_attr8",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r8_3_ecaDel (Ptr<Tuple> ecIterateTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r8_3_ecaDel triggered");

  Ptr<Tuple> result = ecIterateTempDelete;

  result = result->Project (
    ECITERATEDELETE,
    strlist ("ecIterateTempDelete_attr2",
      "ecIterateTempDelete_attr3",
      "ecIterateTempDelete_attr4",
      "ecIterateTempDelete_attr5",
      "ecIterateTempDelete_attr6",
      "ecIterateTempDelete_attr7",
      "ecIterateTempDelete_attr8",
      "ecIterateTempDelete_attr1",
      "ecIterateTempDelete_attr2"),
    strlist ("ecIterateDelete_attr1",
      "ecIterateDelete_attr2",
      "ecIterateDelete_attr3",
      "ecIterateDelete_attr4",
      "ecIterateDelete_attr5",
      "ecIterateDelete_attr6",
      "ecIterateDelete_attr7",
      "ecIterateDelete_attr8",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r8_4_ecaAdd (Ptr<Tuple> ecIterate)
{
  RAPIDNET_LOG_INFO ("Prov_r8_4_ecaAdd triggered");

  Ptr<Tuple> result = ecIterate;

  result = result->Project (
    CITERATE,
    strlist ("ecIterate_attr1",
      "ecIterate_attr2",
      "ecIterate_attr3",
      "ecIterate_attr4",
      "ecIterate_attr5",
      "ecIterate_attr6"),
    strlist ("cIterate_attr1",
      "cIterate_attr2",
      "cIterate_attr3",
      "cIterate_attr4",
      "cIterate_attr5",
      "cIterate_attr6"));

  SendLocal (result);
}

void
Mlprovenance::Prov_r8_4_ecaDel (Ptr<Tuple> ecIterateDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r8_4_ecaDel triggered");

  Ptr<Tuple> result = ecIterateDelete;

  result = result->Project (
    CITERATE,
    strlist ("ecIterateDelete_attr1",
      "ecIterateDelete_attr2",
      "ecIterateDelete_attr3",
      "ecIterateDelete_attr4",
      "ecIterateDelete_attr5",
      "ecIterateDelete_attr6"),
    strlist ("cIterate_attr1",
      "cIterate_attr2",
      "cIterate_attr3",
      "cIterate_attr4",
      "cIterate_attr5",
      "cIterate_attr6"));

  SendLocal (result);
}

void
Mlprovenance::Prov_r8_5_ecaAdd (Ptr<Tuple> ecIterate)
{
  RAPIDNET_LOG_INFO ("Prov_r8_5_ecaAdd triggered");

  Ptr<Tuple> result = ecIterate;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("cIterate")),
                  VarExpr::New ("ecIterate_attr1")),
                VarExpr::New ("ecIterate_attr2")),
              VarExpr::New ("ecIterate_attr3")),
            VarExpr::New ("ecIterate_attr4")),
          VarExpr::New ("ecIterate_attr5")),
        VarExpr::New ("ecIterate_attr6")))));

  result = result->Project (
    PROV,
    strlist ("ecIterate_attr1",
      "VID",
      "ecIterate_attr7",
      "ecIterate_attr8"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r8_5_ecaDel (Ptr<Tuple> ecIterateDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r8_5_ecaDel triggered");

  Ptr<Tuple> result = ecIterateDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("cIterate")),
                  VarExpr::New ("ecIterateDelete_attr1")),
                VarExpr::New ("ecIterateDelete_attr2")),
              VarExpr::New ("ecIterateDelete_attr3")),
            VarExpr::New ("ecIterateDelete_attr4")),
          VarExpr::New ("ecIterateDelete_attr5")),
        VarExpr::New ("ecIterateDelete_attr6")))));

  result = result->Project (
    PROV,
    strlist ("ecIterateDelete_attr1",
      "VID",
      "ecIterateDelete_attr7",
      "ecIterateDelete_attr8"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r9_1_ecaAdd (Ptr<Tuple> cIterate)
{
  RAPIDNET_LOG_INFO ("Prov_r9_1_ecaAdd triggered");

  Ptr<Tuple> result = cIterate;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("cIterate")),
                  VarExpr::New ("cIterate_attr1")),
                VarExpr::New ("cIterate_attr2")),
              VarExpr::New ("cIterate_attr3")),
            VarExpr::New ("cIterate_attr4")),
          VarExpr::New ("cIterate_attr5")),
        VarExpr::New ("cIterate_attr6")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("cIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("cIterate_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r9"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("cIterate_attr3"),
      FSize::New (
        VarExpr::New ("cIterate_attr4")))));

  result = result->Project (
    ECITERATETEMP,
    strlist ("RLOC",
      "cIterate_attr1",
      "cIterate_attr2",
      "N",
      "cIterate_attr4",
      "cIterate_attr5",
      "cIterate_attr6",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("ecIterateTemp_attr1",
      "ecIterateTemp_attr2",
      "ecIterateTemp_attr3",
      "ecIterateTemp_attr4",
      "ecIterateTemp_attr5",
      "ecIterateTemp_attr6",
      "ecIterateTemp_attr7",
      "ecIterateTemp_attr8",
      "ecIterateTemp_attr9",
      "ecIterateTemp_attr10",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r9_1_ecaDel (Ptr<Tuple> cIterateDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r9_1_ecaDel triggered");

  Ptr<Tuple> result = cIterateDelete;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("cIterate")),
                  VarExpr::New ("cIterateDelete_attr1")),
                VarExpr::New ("cIterateDelete_attr2")),
              VarExpr::New ("cIterateDelete_attr3")),
            VarExpr::New ("cIterateDelete_attr4")),
          VarExpr::New ("cIterateDelete_attr5")),
        VarExpr::New ("cIterateDelete_attr6")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("cIterateDelete_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("cIterateDelete_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r9"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("cIterateDelete_attr3"),
      FSize::New (
        VarExpr::New ("cIterateDelete_attr4")))));

  result = result->Project (
    ECITERATETEMPDELETE,
    strlist ("RLOC",
      "cIterateDelete_attr1",
      "cIterateDelete_attr2",
      "N",
      "cIterateDelete_attr4",
      "cIterateDelete_attr5",
      "cIterateDelete_attr6",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("ecIterateTempDelete_attr1",
      "ecIterateTempDelete_attr2",
      "ecIterateTempDelete_attr3",
      "ecIterateTempDelete_attr4",
      "ecIterateTempDelete_attr5",
      "ecIterateTempDelete_attr6",
      "ecIterateTempDelete_attr7",
      "ecIterateTempDelete_attr8",
      "ecIterateTempDelete_attr9",
      "ecIterateTempDelete_attr10",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r10_1_ecaAdd (Ptr<Tuple> cIterate)
{
  RAPIDNET_LOG_INFO ("Prov_r10_1_ecaAdd triggered");

  Ptr<Tuple> result = cIterate;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("cIterate")),
                  VarExpr::New ("cIterate_attr1")),
                VarExpr::New ("cIterate_attr2")),
              VarExpr::New ("cIterate_attr3")),
            VarExpr::New ("cIterate_attr4")),
          VarExpr::New ("cIterate_attr5")),
        VarExpr::New ("cIterate_attr6")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("AnotherList",
    FItem::New (
      VarExpr::New ("cIterate_attr4"),
      VarExpr::New ("cIterate_attr3"))));

  result->Assign (Assignor::New ("Person",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Prob2",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (2)))));

  result->Assign (Assignor::New ("Prob",
    VarExpr::New ("cIterate_attr6")));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("cIterate_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r10"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("cIterate_attr3"),
      FSize::New (
        VarExpr::New ("cIterate_attr4")))));

  result = result->Project (
    ERESULTTEMP,
    strlist ("RLOC",
      "cIterate_attr1",
      "cIterate_attr2",
      "cIterate_attr5",
      "Person",
      "Prob",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("eresultTemp_attr1",
      "eresultTemp_attr2",
      "eresultTemp_attr3",
      "eresultTemp_attr4",
      "eresultTemp_attr5",
      "eresultTemp_attr6",
      "eresultTemp_attr7",
      "eresultTemp_attr8",
      "eresultTemp_attr9",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r10_1_ecaDel (Ptr<Tuple> cIterateDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r10_1_ecaDel triggered");

  Ptr<Tuple> result = cIterateDelete;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                Operation::New (RN_PLUS,
                  ValueExpr::New (StrValue::New ("cIterate")),
                  VarExpr::New ("cIterateDelete_attr1")),
                VarExpr::New ("cIterateDelete_attr2")),
              VarExpr::New ("cIterateDelete_attr3")),
            VarExpr::New ("cIterateDelete_attr4")),
          VarExpr::New ("cIterateDelete_attr5")),
        VarExpr::New ("cIterateDelete_attr6")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("AnotherList",
    FItem::New (
      VarExpr::New ("cIterateDelete_attr4"),
      VarExpr::New ("cIterateDelete_attr3"))));

  result->Assign (Assignor::New ("Person",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (1)))));

  result->Assign (Assignor::New ("Prob2",
    FItem::New (
      VarExpr::New ("AnotherList"),
      ValueExpr::New (Int32Value::New (2)))));

  result->Assign (Assignor::New ("Prob",
    VarExpr::New ("cIterateDelete_attr6")));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("cIterateDelete_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r10"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("cIterateDelete_attr3"),
      FSize::New (
        VarExpr::New ("cIterateDelete_attr4")))));

  result = result->Project (
    ERESULTTEMPDELETE,
    strlist ("RLOC",
      "cIterateDelete_attr1",
      "cIterateDelete_attr2",
      "cIterateDelete_attr5",
      "Person",
      "Prob",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("eresultTempDelete_attr1",
      "eresultTempDelete_attr2",
      "eresultTempDelete_attr3",
      "eresultTempDelete_attr4",
      "eresultTempDelete_attr5",
      "eresultTempDelete_attr6",
      "eresultTempDelete_attr7",
      "eresultTempDelete_attr8",
      "eresultTempDelete_attr9",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r10_2_ecaAdd (Ptr<Tuple> eresultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r10_2_ecaAdd triggered");

  Ptr<Tuple> result = eresultTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("eresultTemp_attr1",
      "eresultTemp_attr7",
      "eresultTemp_attr8",
      "eresultTemp_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r10_2_ecaDel (Ptr<Tuple> eresultTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r10_2_ecaDel triggered");

  Ptr<Tuple> result = eresultTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("eresultTempDelete_attr1",
      "eresultTempDelete_attr7",
      "eresultTempDelete_attr8",
      "eresultTempDelete_attr9"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_r10_3_ecaAdd (Ptr<Tuple> eresultTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r10_3_ecaAdd triggered");

  Ptr<Tuple> result = eresultTemp;

  result = result->Project (
    ERESULT,
    strlist ("eresultTemp_attr2",
      "eresultTemp_attr3",
      "eresultTemp_attr4",
      "eresultTemp_attr5",
      "eresultTemp_attr6",
      "eresultTemp_attr7",
      "eresultTemp_attr1",
      "eresultTemp_attr2"),
    strlist ("eresult_attr1",
      "eresult_attr2",
      "eresult_attr3",
      "eresult_attr4",
      "eresult_attr5",
      "eresult_attr6",
      "eresult_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r10_3_ecaDel (Ptr<Tuple> eresultTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r10_3_ecaDel triggered");

  Ptr<Tuple> result = eresultTempDelete;

  result = result->Project (
    ERESULTDELETE,
    strlist ("eresultTempDelete_attr2",
      "eresultTempDelete_attr3",
      "eresultTempDelete_attr4",
      "eresultTempDelete_attr5",
      "eresultTempDelete_attr6",
      "eresultTempDelete_attr7",
      "eresultTempDelete_attr1",
      "eresultTempDelete_attr2"),
    strlist ("eresultDelete_attr1",
      "eresultDelete_attr2",
      "eresultDelete_attr3",
      "eresultDelete_attr4",
      "eresultDelete_attr5",
      "eresultDelete_attr6",
      "eresultDelete_attr7",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Prov_r10_4_ecaAdd (Ptr<Tuple> eresult)
{
  RAPIDNET_LOG_INFO ("Prov_r10_4_ecaAdd triggered");

  Ptr<Tuple> result = eresult;

  result = result->Project (
    RESULT,
    strlist ("eresult_attr1",
      "eresult_attr2",
      "eresult_attr3",
      "eresult_attr4",
      "eresult_attr5"),
    strlist ("result_attr1",
      "result_attr2",
      "result_attr3",
      "result_attr4",
      "result_attr5"));

  Insert (result);
}

void
Mlprovenance::Prov_r10_4_ecaDel (Ptr<Tuple> eresultDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r10_4_ecaDel triggered");

  Ptr<Tuple> result = eresultDelete;

  result = result->Project (
    RESULT,
    strlist ("eresultDelete_attr1",
      "eresultDelete_attr2",
      "eresultDelete_attr3",
      "eresultDelete_attr4",
      "eresultDelete_attr5"),
    strlist ("result_attr1",
      "result_attr2",
      "result_attr3",
      "result_attr4",
      "result_attr5"));

  Delete (result);
}

void
Mlprovenance::Prov_r10_5_ecaAdd (Ptr<Tuple> eresult)
{
  RAPIDNET_LOG_INFO ("Prov_r10_5_ecaAdd triggered");

  Ptr<Tuple> result = eresult;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("result")),
                VarExpr::New ("eresult_attr1")),
              VarExpr::New ("eresult_attr2")),
            VarExpr::New ("eresult_attr3")),
          VarExpr::New ("eresult_attr4")),
        VarExpr::New ("eresult_attr5")))));

  result = result->Project (
    PROV,
    strlist ("eresult_attr1",
      "VID",
      "eresult_attr6",
      "eresult_attr7"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_r10_5_ecaDel (Ptr<Tuple> eresultDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r10_5_ecaDel triggered");

  Ptr<Tuple> result = eresultDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              Operation::New (RN_PLUS,
                ValueExpr::New (StrValue::New ("result")),
                VarExpr::New ("eresultDelete_attr1")),
              VarExpr::New ("eresultDelete_attr2")),
            VarExpr::New ("eresultDelete_attr3")),
          VarExpr::New ("eresultDelete_attr4")),
        VarExpr::New ("eresultDelete_attr5")))));

  result = result->Project (
    PROV,
    strlist ("eresultDelete_attr1",
      "VID",
      "eresultDelete_attr6",
      "eresultDelete_attr7"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_edb_1Eca1Ins (Ptr<Tuple> associationrule)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Ins triggered");

  Ptr<Tuple> result = associationrule;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("associationrule_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("associationrule")),
              VarExpr::New ("associationrule_attr1")),
            VarExpr::New ("associationrule_attr2")),
          VarExpr::New ("associationrule_attr3")),
        VarExpr::New ("associationrule_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("associationrule_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_edb_1Eca1Del (Ptr<Tuple> associationrule)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Del triggered");

  Ptr<Tuple> result = associationrule;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("associationrule_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("associationrule")),
              VarExpr::New ("associationrule_attr1")),
            VarExpr::New ("associationrule_attr2")),
          VarExpr::New ("associationrule_attr3")),
        VarExpr::New ("associationrule_attr4")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("associationrule_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_edb_2Eca1Ins (Ptr<Tuple> clf)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Ins triggered");

  Ptr<Tuple> result = clf;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("clf_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("clf")),
          VarExpr::New ("clf_attr1")),
        VarExpr::New ("clf_attr2")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("clf_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_edb_2Eca1Del (Ptr<Tuple> clf)
{
  RAPIDNET_LOG_INFO ("Prov_edb_2Eca1Del triggered");

  Ptr<Tuple> result = clf;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("clf_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("clf")),
          VarExpr::New ("clf_attr1")),
        VarExpr::New ("clf_attr2")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("clf_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Prov_edb_3Eca1Ins (Ptr<Tuple> image)
{
  RAPIDNET_LOG_INFO ("Prov_edb_3Eca1Ins triggered");

  Ptr<Tuple> result = image;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("image_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("image")),
            VarExpr::New ("image_attr1")),
          VarExpr::New ("image_attr2")),
        VarExpr::New ("image_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("image_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
Mlprovenance::Prov_edb_3Eca1Del (Ptr<Tuple> image)
{
  RAPIDNET_LOG_INFO ("Prov_edb_3Eca1Del triggered");

  Ptr<Tuple> result = image;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("image_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("image")),
            VarExpr::New ("image_attr1")),
          VarExpr::New ("image_attr2")),
        VarExpr::New ("image_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("image_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
Mlprovenance::Edb1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Edb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPEdb::New (
      VarExpr::New ("provQuery_attr3"),
      VarExpr::New ("provQuery_attr1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr4",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr4"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Idb1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = AggWrapList::New ()->Compute (result, provQuery, "prov_attr3");

  result = result->Project (
    PQLIST,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "list"),
    strlist ("pQList_attr1",
      "pQList_attr2",
      "pQList_attr3"));

  Insert (result);
}

void
Mlprovenance::Idb2_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb2_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    PRESULTTMP,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr4",
      "provQuery_attr3",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Mlprovenance::Idb3_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb3_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    PITERATE,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "N"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3"));

  SendLocal (result);
}

void
Mlprovenance::Idb4_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Project (
    PITERATE,
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "N"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3"));

  SendLocal (result);
}

void
Mlprovenance::Idb5_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("RID",
    FItem::New (
      VarExpr::New ("pQList_attr3"),
      VarExpr::New ("pIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("pIterate_attr2")),
        VarExpr::New ("RID")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Project (
    ERULEQUERY,
    strlist ("pIterate_attr1",
      "NQID",
      "RID"),
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3"));

  SendLocal (result);
}

void
Mlprovenance::Idb6_eca (Ptr<Tuple> eRuleQuery)
{
  RAPIDNET_LOG_INFO ("Idb6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    eRuleQuery,
    strlist ("prov_attr3", "prov_attr1"),
    strlist ("eRuleQuery_attr3", "eRuleQuery_attr1"));

  result = result->Project (
    RULEQUERY,
    strlist ("prov_attr4",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3",
      "eRuleQuery_attr1",
      "prov_attr4"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Idb7_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Idb7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    rReturn,
    strlist ("pResultTmp_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("pResultTmp_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PRESULTTMP,
    strlist ("rReturn_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
Mlprovenance::Idb8Eca0Ins (Ptr<Tuple> pResultTmp)
{
  RAPIDNET_LOG_INFO ("Idb8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pResultTmp,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Mlprovenance::Idb8Eca1Ins (Ptr<Tuple> pQList)
{
  RAPIDNET_LOG_INFO ("Idb8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    pQList,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("pQList_attr2", "pQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pQList_attr1",
      "pQList_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
Mlprovenance::Idb9_eca (Ptr<Tuple> ePReturn)
{
  RAPIDNET_LOG_INFO ("Idb9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    ePReturn,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("ePReturn_attr2", "ePReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPIdb::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("ePReturn_attr1"))));

  result = result->Project (
    PRETURN,
    strlist ("pResultTmp_attr3",
      "ePReturn_attr2",
      "pResultTmp_attr4",
      "Prov",
      "pResultTmp_attr3"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
Mlprovenance::Rv1_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    ruleQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = result->Project (
    RQLIST,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleExec_attr4"),
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3"));

  Insert (result);
}

void
Mlprovenance::Rv2_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv2_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    RRESULTTMP,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr4",
      "ruleQuery_attr3",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Mlprovenance::Rv3_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv3_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    RITERATE,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Mlprovenance::Rv4_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("rIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("rIterate_attr3"),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    RITERATE,
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
Mlprovenance::Rv5_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("rQList_attr3"),
      VarExpr::New ("rIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rIterate_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    EPROVQUERY,
    strlist ("rIterate_attr1",
      "NQID",
      "VID"),
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3"));

  SendLocal (result);
}

void
Mlprovenance::Rv6_eca (Ptr<Tuple> eProvQuery)
{
  RAPIDNET_LOG_INFO ("Rv6_eca triggered");

  Ptr<Tuple> result = eProvQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eProvQuery_attr1")));

  result = result->Project (
    PROVQUERY,
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "$1"),
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4"));

  SendLocal (result);
}

void
Mlprovenance::Rv7_eca (Ptr<Tuple> pReturn)
{
  RAPIDNET_LOG_INFO ("Rv7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    pReturn,
    strlist ("rResultTmp_attr1"),
    strlist ("pReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("pReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("rResultTmp_attr2")),
          VarExpr::New ("pReturn_attr3"))))));

  result = result->Project (
    RRESULTTMP,
    strlist ("pReturn_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
Mlprovenance::Rv8Eca0Ins (Ptr<Tuple> rResultTmp)
{
  RAPIDNET_LOG_INFO ("Rv8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rResultTmp,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    ERRETURN,
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
Mlprovenance::Rv8Eca1Ins (Ptr<Tuple> rQList)
{
  RAPIDNET_LOG_INFO ("Rv8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    rQList,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("rQList_attr2", "rQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    ERRETURN,
    strlist ("rQList_attr1",
      "rQList_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
Mlprovenance::Rv9_eca (Ptr<Tuple> eRReturn)
{
  RAPIDNET_LOG_INFO ("Rv9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    eRReturn,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("eRReturn_attr2", "eRReturn_attr1"));

  result = GetRelation (RULEEXEC)->Join (
    result,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rResultTmp_attr4", "eRReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRule::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("eRReturn_attr1"),
      VarExpr::New ("ruleExec_attr3"))));

  result = result->Project (
    RRETURN,
    strlist ("rResultTmp_attr3",
      "eRReturn_attr2",
      "rResultTmp_attr4",
      "Prov",
      "rResultTmp_attr3"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

